/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsy.knowledge.traffic.base.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-27")
public class time_point_t implements org.apache.thrift.TBase<time_point_t, time_point_t._Fields>, java.io.Serializable, Cloneable, Comparable<time_point_t> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("time_point_t");

  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ACCURACY_FIELD_DESC = new org.apache.thrift.protocol.TField("accuracy", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speed", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ACCELERATED_SPEED_X_FIELD_DESC = new org.apache.thrift.protocol.TField("acceleratedSpeedX", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ACCELERATED_SPEED_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("acceleratedSpeedY", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ACCELERATED_SPEED_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("acceleratedSpeedZ", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField INCLUDED_ANGLE_YAW_FIELD_DESC = new org.apache.thrift.protocol.TField("includedAngleYaw", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField INCLUDED_ANGLE_ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("includedAngleRoll", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField INCLUDED_ANGLE_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("includedAnglePitch", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField PULL_PEER_FIELD_DESC = new org.apache.thrift.protocol.TField("pull_peer", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField PRE_LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("pre_lng", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PRE_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("pre_lat", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField GPS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("gps_source", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField BIZSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bizstatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BUSINESS_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessLine", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ABOVE_SEA_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("aboveSeaLevel", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField PRESSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("pressure", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SPECIFICTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specifictype", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField SPECIFIC_FIELD_DESC = new org.apache.thrift.protocol.TField("specific", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DSCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dscode", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("trace", org.apache.thrift.protocol.TType.STRUCT, (short)27);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new time_point_tStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new time_point_tTupleSchemeFactory();

  public int x; // required
  public int y; // required
  public long timestamp; // required
  /**
   * 
   * @see CoordinateType
   */
  public CoordinateType type; // required
  public double accuracy; // required
  public double direction; // required
  public double speed; // required
  public double acceleratedSpeedX; // required
  public double acceleratedSpeedY; // required
  public double acceleratedSpeedZ; // required
  public double includedAngleYaw; // required
  public double includedAngleRoll; // required
  public double includedAnglePitch; // required
  public boolean pull_peer; // required
  public int pre_lng; // required
  public int pre_lat; // required
  public int state; // required
  /**
   * 
   * @see GPSSource
   */
  public GPSSource gps_source; // required
  public int bizstatus; // required
  public int businessLine; // required
  public double aboveSeaLevel; // required
  public double pressure; // required
  public int specifictype; // required
  public java.lang.String specific; // required
  public int dscode; // required
  public java.lang.String id; // required
  public com.lsy.knowledge.traffic.base.domain.thrift.Trace trace; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    X((short)1, "x"),
    Y((short)2, "y"),
    TIMESTAMP((short)3, "timestamp"),
    /**
     * 
     * @see CoordinateType
     */
    TYPE((short)4, "type"),
    ACCURACY((short)5, "accuracy"),
    DIRECTION((short)6, "direction"),
    SPEED((short)7, "speed"),
    ACCELERATED_SPEED_X((short)8, "acceleratedSpeedX"),
    ACCELERATED_SPEED_Y((short)9, "acceleratedSpeedY"),
    ACCELERATED_SPEED_Z((short)10, "acceleratedSpeedZ"),
    INCLUDED_ANGLE_YAW((short)11, "includedAngleYaw"),
    INCLUDED_ANGLE_ROLL((short)12, "includedAngleRoll"),
    INCLUDED_ANGLE_PITCH((short)13, "includedAnglePitch"),
    PULL_PEER((short)14, "pull_peer"),
    PRE_LNG((short)15, "pre_lng"),
    PRE_LAT((short)16, "pre_lat"),
    STATE((short)17, "state"),
    /**
     * 
     * @see GPSSource
     */
    GPS_SOURCE((short)18, "gps_source"),
    BIZSTATUS((short)19, "bizstatus"),
    BUSINESS_LINE((short)20, "businessLine"),
    ABOVE_SEA_LEVEL((short)21, "aboveSeaLevel"),
    PRESSURE((short)22, "pressure"),
    SPECIFICTYPE((short)23, "specifictype"),
    SPECIFIC((short)24, "specific"),
    DSCODE((short)25, "dscode"),
    ID((short)26, "id"),
    TRACE((short)27, "trace");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // X
          return X;
        case 2: // Y
          return Y;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // TYPE
          return TYPE;
        case 5: // ACCURACY
          return ACCURACY;
        case 6: // DIRECTION
          return DIRECTION;
        case 7: // SPEED
          return SPEED;
        case 8: // ACCELERATED_SPEED_X
          return ACCELERATED_SPEED_X;
        case 9: // ACCELERATED_SPEED_Y
          return ACCELERATED_SPEED_Y;
        case 10: // ACCELERATED_SPEED_Z
          return ACCELERATED_SPEED_Z;
        case 11: // INCLUDED_ANGLE_YAW
          return INCLUDED_ANGLE_YAW;
        case 12: // INCLUDED_ANGLE_ROLL
          return INCLUDED_ANGLE_ROLL;
        case 13: // INCLUDED_ANGLE_PITCH
          return INCLUDED_ANGLE_PITCH;
        case 14: // PULL_PEER
          return PULL_PEER;
        case 15: // PRE_LNG
          return PRE_LNG;
        case 16: // PRE_LAT
          return PRE_LAT;
        case 17: // STATE
          return STATE;
        case 18: // GPS_SOURCE
          return GPS_SOURCE;
        case 19: // BIZSTATUS
          return BIZSTATUS;
        case 20: // BUSINESS_LINE
          return BUSINESS_LINE;
        case 21: // ABOVE_SEA_LEVEL
          return ABOVE_SEA_LEVEL;
        case 22: // PRESSURE
          return PRESSURE;
        case 23: // SPECIFICTYPE
          return SPECIFICTYPE;
        case 24: // SPECIFIC
          return SPECIFIC;
        case 25: // DSCODE
          return DSCODE;
        case 26: // ID
          return ID;
        case 27: // TRACE
          return TRACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __X_ISSET_ID = 0;
  private static final int __Y_ISSET_ID = 1;
  private static final int __TIMESTAMP_ISSET_ID = 2;
  private static final int __ACCURACY_ISSET_ID = 3;
  private static final int __DIRECTION_ISSET_ID = 4;
  private static final int __SPEED_ISSET_ID = 5;
  private static final int __ACCELERATEDSPEEDX_ISSET_ID = 6;
  private static final int __ACCELERATEDSPEEDY_ISSET_ID = 7;
  private static final int __ACCELERATEDSPEEDZ_ISSET_ID = 8;
  private static final int __INCLUDEDANGLEYAW_ISSET_ID = 9;
  private static final int __INCLUDEDANGLEROLL_ISSET_ID = 10;
  private static final int __INCLUDEDANGLEPITCH_ISSET_ID = 11;
  private static final int __PULL_PEER_ISSET_ID = 12;
  private static final int __PRE_LNG_ISSET_ID = 13;
  private static final int __PRE_LAT_ISSET_ID = 14;
  private static final int __STATE_ISSET_ID = 15;
  private static final int __BIZSTATUS_ISSET_ID = 16;
  private static final int __BUSINESSLINE_ISSET_ID = 17;
  private static final int __ABOVESEALEVEL_ISSET_ID = 18;
  private static final int __PRESSURE_ISSET_ID = 19;
  private static final int __SPECIFICTYPE_ISSET_ID = 20;
  private static final int __DSCODE_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRACE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "time_t")));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CoordinateType.class)));
    tmpMap.put(_Fields.ACCURACY, new org.apache.thrift.meta_data.FieldMetaData("accuracy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEED, new org.apache.thrift.meta_data.FieldMetaData("speed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCELERATED_SPEED_X, new org.apache.thrift.meta_data.FieldMetaData("acceleratedSpeedX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCELERATED_SPEED_Y, new org.apache.thrift.meta_data.FieldMetaData("acceleratedSpeedY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCELERATED_SPEED_Z, new org.apache.thrift.meta_data.FieldMetaData("acceleratedSpeedZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCLUDED_ANGLE_YAW, new org.apache.thrift.meta_data.FieldMetaData("includedAngleYaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCLUDED_ANGLE_ROLL, new org.apache.thrift.meta_data.FieldMetaData("includedAngleRoll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCLUDED_ANGLE_PITCH, new org.apache.thrift.meta_data.FieldMetaData("includedAnglePitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PULL_PEER, new org.apache.thrift.meta_data.FieldMetaData("pull_peer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRE_LNG, new org.apache.thrift.meta_data.FieldMetaData("pre_lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.PRE_LAT, new org.apache.thrift.meta_data.FieldMetaData("pre_lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GPS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("gps_source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GPSSource.class)));
    tmpMap.put(_Fields.BIZSTATUS, new org.apache.thrift.meta_data.FieldMetaData("bizstatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_LINE, new org.apache.thrift.meta_data.FieldMetaData("businessLine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ABOVE_SEA_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("aboveSeaLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRESSURE, new org.apache.thrift.meta_data.FieldMetaData("pressure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPECIFICTYPE, new org.apache.thrift.meta_data.FieldMetaData("specifictype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIFIC, new org.apache.thrift.meta_data.FieldMetaData("specific", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSCODE, new org.apache.thrift.meta_data.FieldMetaData("dscode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE, new org.apache.thrift.meta_data.FieldMetaData("trace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lsy.knowledge.traffic.base.domain.thrift.Trace.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(time_point_t.class, metaDataMap);
  }

  public time_point_t() {
  }

  public time_point_t(
    int x,
    int y,
    long timestamp,
    CoordinateType type,
    double accuracy,
    double direction,
    double speed,
    double acceleratedSpeedX,
    double acceleratedSpeedY,
    double acceleratedSpeedZ,
    double includedAngleYaw,
    double includedAngleRoll,
    double includedAnglePitch,
    boolean pull_peer,
    int pre_lng,
    int pre_lat,
    int state,
    GPSSource gps_source,
    int bizstatus,
    int businessLine,
    double aboveSeaLevel,
    double pressure,
    int specifictype,
    java.lang.String specific,
    int dscode,
    java.lang.String id)
  {
    this();
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.type = type;
    this.accuracy = accuracy;
    setAccuracyIsSet(true);
    this.direction = direction;
    setDirectionIsSet(true);
    this.speed = speed;
    setSpeedIsSet(true);
    this.acceleratedSpeedX = acceleratedSpeedX;
    setAcceleratedSpeedXIsSet(true);
    this.acceleratedSpeedY = acceleratedSpeedY;
    setAcceleratedSpeedYIsSet(true);
    this.acceleratedSpeedZ = acceleratedSpeedZ;
    setAcceleratedSpeedZIsSet(true);
    this.includedAngleYaw = includedAngleYaw;
    setIncludedAngleYawIsSet(true);
    this.includedAngleRoll = includedAngleRoll;
    setIncludedAngleRollIsSet(true);
    this.includedAnglePitch = includedAnglePitch;
    setIncludedAnglePitchIsSet(true);
    this.pull_peer = pull_peer;
    setPull_peerIsSet(true);
    this.pre_lng = pre_lng;
    setPre_lngIsSet(true);
    this.pre_lat = pre_lat;
    setPre_latIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.gps_source = gps_source;
    this.bizstatus = bizstatus;
    setBizstatusIsSet(true);
    this.businessLine = businessLine;
    setBusinessLineIsSet(true);
    this.aboveSeaLevel = aboveSeaLevel;
    setAboveSeaLevelIsSet(true);
    this.pressure = pressure;
    setPressureIsSet(true);
    this.specifictype = specifictype;
    setSpecifictypeIsSet(true);
    this.specific = specific;
    this.dscode = dscode;
    setDscodeIsSet(true);
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public time_point_t(time_point_t other) {
    __isset_bitfield = other.__isset_bitfield;
    this.x = other.x;
    this.y = other.y;
    this.timestamp = other.timestamp;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.accuracy = other.accuracy;
    this.direction = other.direction;
    this.speed = other.speed;
    this.acceleratedSpeedX = other.acceleratedSpeedX;
    this.acceleratedSpeedY = other.acceleratedSpeedY;
    this.acceleratedSpeedZ = other.acceleratedSpeedZ;
    this.includedAngleYaw = other.includedAngleYaw;
    this.includedAngleRoll = other.includedAngleRoll;
    this.includedAnglePitch = other.includedAnglePitch;
    this.pull_peer = other.pull_peer;
    this.pre_lng = other.pre_lng;
    this.pre_lat = other.pre_lat;
    this.state = other.state;
    if (other.isSetGps_source()) {
      this.gps_source = other.gps_source;
    }
    this.bizstatus = other.bizstatus;
    this.businessLine = other.businessLine;
    this.aboveSeaLevel = other.aboveSeaLevel;
    this.pressure = other.pressure;
    this.specifictype = other.specifictype;
    if (other.isSetSpecific()) {
      this.specific = other.specific;
    }
    this.dscode = other.dscode;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTrace()) {
      this.trace = new com.lsy.knowledge.traffic.base.domain.thrift.Trace(other.trace);
    }
  }

  public time_point_t deepCopy() {
    return new time_point_t(this);
  }

  @Override
  public void clear() {
    setXIsSet(false);
    this.x = 0;
    setYIsSet(false);
    this.y = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.type = null;
    setAccuracyIsSet(false);
    this.accuracy = 0.0;
    setDirectionIsSet(false);
    this.direction = 0.0;
    setSpeedIsSet(false);
    this.speed = 0.0;
    setAcceleratedSpeedXIsSet(false);
    this.acceleratedSpeedX = 0.0;
    setAcceleratedSpeedYIsSet(false);
    this.acceleratedSpeedY = 0.0;
    setAcceleratedSpeedZIsSet(false);
    this.acceleratedSpeedZ = 0.0;
    setIncludedAngleYawIsSet(false);
    this.includedAngleYaw = 0.0;
    setIncludedAngleRollIsSet(false);
    this.includedAngleRoll = 0.0;
    setIncludedAnglePitchIsSet(false);
    this.includedAnglePitch = 0.0;
    setPull_peerIsSet(false);
    this.pull_peer = false;
    setPre_lngIsSet(false);
    this.pre_lng = 0;
    setPre_latIsSet(false);
    this.pre_lat = 0;
    setStateIsSet(false);
    this.state = 0;
    this.gps_source = null;
    setBizstatusIsSet(false);
    this.bizstatus = 0;
    setBusinessLineIsSet(false);
    this.businessLine = 0;
    setAboveSeaLevelIsSet(false);
    this.aboveSeaLevel = 0.0;
    setPressureIsSet(false);
    this.pressure = 0.0;
    setSpecifictypeIsSet(false);
    this.specifictype = 0;
    this.specific = null;
    setDscodeIsSet(false);
    this.dscode = 0;
    this.id = null;
    this.trace = null;
  }

  public int getX() {
    return this.x;
  }

  public time_point_t setX(int x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public int getY() {
    return this.y;
  }

  public time_point_t setY(int y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public time_point_t setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see CoordinateType
   */
  public CoordinateType getType() {
    return this.type;
  }

  /**
   * 
   * @see CoordinateType
   */
  public time_point_t setType(CoordinateType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public double getAccuracy() {
    return this.accuracy;
  }

  public time_point_t setAccuracy(double accuracy) {
    this.accuracy = accuracy;
    setAccuracyIsSet(true);
    return this;
  }

  public void unsetAccuracy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCURACY_ISSET_ID);
  }

  /** Returns true if field accuracy is set (has been assigned a value) and false otherwise */
  public boolean isSetAccuracy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCURACY_ISSET_ID);
  }

  public void setAccuracyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCURACY_ISSET_ID, value);
  }

  public double getDirection() {
    return this.direction;
  }

  public time_point_t setDirection(double direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public double getSpeed() {
    return this.speed;
  }

  public time_point_t setSpeed(double speed) {
    this.speed = speed;
    setSpeedIsSet(true);
    return this;
  }

  public void unsetSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  /** Returns true if field speed is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  public void setSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEED_ISSET_ID, value);
  }

  public double getAcceleratedSpeedX() {
    return this.acceleratedSpeedX;
  }

  public time_point_t setAcceleratedSpeedX(double acceleratedSpeedX) {
    this.acceleratedSpeedX = acceleratedSpeedX;
    setAcceleratedSpeedXIsSet(true);
    return this;
  }

  public void unsetAcceleratedSpeedX() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCELERATEDSPEEDX_ISSET_ID);
  }

  /** Returns true if field acceleratedSpeedX is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceleratedSpeedX() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCELERATEDSPEEDX_ISSET_ID);
  }

  public void setAcceleratedSpeedXIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCELERATEDSPEEDX_ISSET_ID, value);
  }

  public double getAcceleratedSpeedY() {
    return this.acceleratedSpeedY;
  }

  public time_point_t setAcceleratedSpeedY(double acceleratedSpeedY) {
    this.acceleratedSpeedY = acceleratedSpeedY;
    setAcceleratedSpeedYIsSet(true);
    return this;
  }

  public void unsetAcceleratedSpeedY() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCELERATEDSPEEDY_ISSET_ID);
  }

  /** Returns true if field acceleratedSpeedY is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceleratedSpeedY() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCELERATEDSPEEDY_ISSET_ID);
  }

  public void setAcceleratedSpeedYIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCELERATEDSPEEDY_ISSET_ID, value);
  }

  public double getAcceleratedSpeedZ() {
    return this.acceleratedSpeedZ;
  }

  public time_point_t setAcceleratedSpeedZ(double acceleratedSpeedZ) {
    this.acceleratedSpeedZ = acceleratedSpeedZ;
    setAcceleratedSpeedZIsSet(true);
    return this;
  }

  public void unsetAcceleratedSpeedZ() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCELERATEDSPEEDZ_ISSET_ID);
  }

  /** Returns true if field acceleratedSpeedZ is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceleratedSpeedZ() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCELERATEDSPEEDZ_ISSET_ID);
  }

  public void setAcceleratedSpeedZIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCELERATEDSPEEDZ_ISSET_ID, value);
  }

  public double getIncludedAngleYaw() {
    return this.includedAngleYaw;
  }

  public time_point_t setIncludedAngleYaw(double includedAngleYaw) {
    this.includedAngleYaw = includedAngleYaw;
    setIncludedAngleYawIsSet(true);
    return this;
  }

  public void unsetIncludedAngleYaw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDANGLEYAW_ISSET_ID);
  }

  /** Returns true if field includedAngleYaw is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludedAngleYaw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCLUDEDANGLEYAW_ISSET_ID);
  }

  public void setIncludedAngleYawIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCLUDEDANGLEYAW_ISSET_ID, value);
  }

  public double getIncludedAngleRoll() {
    return this.includedAngleRoll;
  }

  public time_point_t setIncludedAngleRoll(double includedAngleRoll) {
    this.includedAngleRoll = includedAngleRoll;
    setIncludedAngleRollIsSet(true);
    return this;
  }

  public void unsetIncludedAngleRoll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDANGLEROLL_ISSET_ID);
  }

  /** Returns true if field includedAngleRoll is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludedAngleRoll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCLUDEDANGLEROLL_ISSET_ID);
  }

  public void setIncludedAngleRollIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCLUDEDANGLEROLL_ISSET_ID, value);
  }

  public double getIncludedAnglePitch() {
    return this.includedAnglePitch;
  }

  public time_point_t setIncludedAnglePitch(double includedAnglePitch) {
    this.includedAnglePitch = includedAnglePitch;
    setIncludedAnglePitchIsSet(true);
    return this;
  }

  public void unsetIncludedAnglePitch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDANGLEPITCH_ISSET_ID);
  }

  /** Returns true if field includedAnglePitch is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludedAnglePitch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCLUDEDANGLEPITCH_ISSET_ID);
  }

  public void setIncludedAnglePitchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCLUDEDANGLEPITCH_ISSET_ID, value);
  }

  public boolean isPull_peer() {
    return this.pull_peer;
  }

  public time_point_t setPull_peer(boolean pull_peer) {
    this.pull_peer = pull_peer;
    setPull_peerIsSet(true);
    return this;
  }

  public void unsetPull_peer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PULL_PEER_ISSET_ID);
  }

  /** Returns true if field pull_peer is set (has been assigned a value) and false otherwise */
  public boolean isSetPull_peer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PULL_PEER_ISSET_ID);
  }

  public void setPull_peerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PULL_PEER_ISSET_ID, value);
  }

  public int getPre_lng() {
    return this.pre_lng;
  }

  public time_point_t setPre_lng(int pre_lng) {
    this.pre_lng = pre_lng;
    setPre_lngIsSet(true);
    return this;
  }

  public void unsetPre_lng() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRE_LNG_ISSET_ID);
  }

  /** Returns true if field pre_lng is set (has been assigned a value) and false otherwise */
  public boolean isSetPre_lng() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRE_LNG_ISSET_ID);
  }

  public void setPre_lngIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRE_LNG_ISSET_ID, value);
  }

  public int getPre_lat() {
    return this.pre_lat;
  }

  public time_point_t setPre_lat(int pre_lat) {
    this.pre_lat = pre_lat;
    setPre_latIsSet(true);
    return this;
  }

  public void unsetPre_lat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRE_LAT_ISSET_ID);
  }

  /** Returns true if field pre_lat is set (has been assigned a value) and false otherwise */
  public boolean isSetPre_lat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRE_LAT_ISSET_ID);
  }

  public void setPre_latIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRE_LAT_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public time_point_t setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  /**
   * 
   * @see GPSSource
   */
  public GPSSource getGps_source() {
    return this.gps_source;
  }

  /**
   * 
   * @see GPSSource
   */
  public time_point_t setGps_source(GPSSource gps_source) {
    this.gps_source = gps_source;
    return this;
  }

  public void unsetGps_source() {
    this.gps_source = null;
  }

  /** Returns true if field gps_source is set (has been assigned a value) and false otherwise */
  public boolean isSetGps_source() {
    return this.gps_source != null;
  }

  public void setGps_sourceIsSet(boolean value) {
    if (!value) {
      this.gps_source = null;
    }
  }

  public int getBizstatus() {
    return this.bizstatus;
  }

  public time_point_t setBizstatus(int bizstatus) {
    this.bizstatus = bizstatus;
    setBizstatusIsSet(true);
    return this;
  }

  public void unsetBizstatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIZSTATUS_ISSET_ID);
  }

  /** Returns true if field bizstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBizstatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIZSTATUS_ISSET_ID);
  }

  public void setBizstatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIZSTATUS_ISSET_ID, value);
  }

  public int getBusinessLine() {
    return this.businessLine;
  }

  public time_point_t setBusinessLine(int businessLine) {
    this.businessLine = businessLine;
    setBusinessLineIsSet(true);
    return this;
  }

  public void unsetBusinessLine() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUSINESSLINE_ISSET_ID);
  }

  /** Returns true if field businessLine is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessLine() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUSINESSLINE_ISSET_ID);
  }

  public void setBusinessLineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUSINESSLINE_ISSET_ID, value);
  }

  public double getAboveSeaLevel() {
    return this.aboveSeaLevel;
  }

  public time_point_t setAboveSeaLevel(double aboveSeaLevel) {
    this.aboveSeaLevel = aboveSeaLevel;
    setAboveSeaLevelIsSet(true);
    return this;
  }

  public void unsetAboveSeaLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ABOVESEALEVEL_ISSET_ID);
  }

  /** Returns true if field aboveSeaLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAboveSeaLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ABOVESEALEVEL_ISSET_ID);
  }

  public void setAboveSeaLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ABOVESEALEVEL_ISSET_ID, value);
  }

  public double getPressure() {
    return this.pressure;
  }

  public time_point_t setPressure(double pressure) {
    this.pressure = pressure;
    setPressureIsSet(true);
    return this;
  }

  public void unsetPressure() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESSURE_ISSET_ID);
  }

  /** Returns true if field pressure is set (has been assigned a value) and false otherwise */
  public boolean isSetPressure() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESSURE_ISSET_ID);
  }

  public void setPressureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESSURE_ISSET_ID, value);
  }

  public int getSpecifictype() {
    return this.specifictype;
  }

  public time_point_t setSpecifictype(int specifictype) {
    this.specifictype = specifictype;
    setSpecifictypeIsSet(true);
    return this;
  }

  public void unsetSpecifictype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPECIFICTYPE_ISSET_ID);
  }

  /** Returns true if field specifictype is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecifictype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPECIFICTYPE_ISSET_ID);
  }

  public void setSpecifictypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPECIFICTYPE_ISSET_ID, value);
  }

  public java.lang.String getSpecific() {
    return this.specific;
  }

  public time_point_t setSpecific(java.lang.String specific) {
    this.specific = specific;
    return this;
  }

  public void unsetSpecific() {
    this.specific = null;
  }

  /** Returns true if field specific is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecific() {
    return this.specific != null;
  }

  public void setSpecificIsSet(boolean value) {
    if (!value) {
      this.specific = null;
    }
  }

  public int getDscode() {
    return this.dscode;
  }

  public time_point_t setDscode(int dscode) {
    this.dscode = dscode;
    setDscodeIsSet(true);
    return this;
  }

  public void unsetDscode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DSCODE_ISSET_ID);
  }

  /** Returns true if field dscode is set (has been assigned a value) and false otherwise */
  public boolean isSetDscode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DSCODE_ISSET_ID);
  }

  public void setDscodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DSCODE_ISSET_ID, value);
  }

  public java.lang.String getId() {
    return this.id;
  }

  public time_point_t setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public com.lsy.knowledge.traffic.base.domain.thrift.Trace getTrace() {
    return this.trace;
  }

  public time_point_t setTrace(com.lsy.knowledge.traffic.base.domain.thrift.Trace trace) {
    this.trace = trace;
    return this;
  }

  public void unsetTrace() {
    this.trace = null;
  }

  /** Returns true if field trace is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace() {
    return this.trace != null;
  }

  public void setTraceIsSet(boolean value) {
    if (!value) {
      this.trace = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((java.lang.Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((java.lang.Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CoordinateType)value);
      }
      break;

    case ACCURACY:
      if (value == null) {
        unsetAccuracy();
      } else {
        setAccuracy((java.lang.Double)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((java.lang.Double)value);
      }
      break;

    case SPEED:
      if (value == null) {
        unsetSpeed();
      } else {
        setSpeed((java.lang.Double)value);
      }
      break;

    case ACCELERATED_SPEED_X:
      if (value == null) {
        unsetAcceleratedSpeedX();
      } else {
        setAcceleratedSpeedX((java.lang.Double)value);
      }
      break;

    case ACCELERATED_SPEED_Y:
      if (value == null) {
        unsetAcceleratedSpeedY();
      } else {
        setAcceleratedSpeedY((java.lang.Double)value);
      }
      break;

    case ACCELERATED_SPEED_Z:
      if (value == null) {
        unsetAcceleratedSpeedZ();
      } else {
        setAcceleratedSpeedZ((java.lang.Double)value);
      }
      break;

    case INCLUDED_ANGLE_YAW:
      if (value == null) {
        unsetIncludedAngleYaw();
      } else {
        setIncludedAngleYaw((java.lang.Double)value);
      }
      break;

    case INCLUDED_ANGLE_ROLL:
      if (value == null) {
        unsetIncludedAngleRoll();
      } else {
        setIncludedAngleRoll((java.lang.Double)value);
      }
      break;

    case INCLUDED_ANGLE_PITCH:
      if (value == null) {
        unsetIncludedAnglePitch();
      } else {
        setIncludedAnglePitch((java.lang.Double)value);
      }
      break;

    case PULL_PEER:
      if (value == null) {
        unsetPull_peer();
      } else {
        setPull_peer((java.lang.Boolean)value);
      }
      break;

    case PRE_LNG:
      if (value == null) {
        unsetPre_lng();
      } else {
        setPre_lng((java.lang.Integer)value);
      }
      break;

    case PRE_LAT:
      if (value == null) {
        unsetPre_lat();
      } else {
        setPre_lat((java.lang.Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.Integer)value);
      }
      break;

    case GPS_SOURCE:
      if (value == null) {
        unsetGps_source();
      } else {
        setGps_source((GPSSource)value);
      }
      break;

    case BIZSTATUS:
      if (value == null) {
        unsetBizstatus();
      } else {
        setBizstatus((java.lang.Integer)value);
      }
      break;

    case BUSINESS_LINE:
      if (value == null) {
        unsetBusinessLine();
      } else {
        setBusinessLine((java.lang.Integer)value);
      }
      break;

    case ABOVE_SEA_LEVEL:
      if (value == null) {
        unsetAboveSeaLevel();
      } else {
        setAboveSeaLevel((java.lang.Double)value);
      }
      break;

    case PRESSURE:
      if (value == null) {
        unsetPressure();
      } else {
        setPressure((java.lang.Double)value);
      }
      break;

    case SPECIFICTYPE:
      if (value == null) {
        unsetSpecifictype();
      } else {
        setSpecifictype((java.lang.Integer)value);
      }
      break;

    case SPECIFIC:
      if (value == null) {
        unsetSpecific();
      } else {
        setSpecific((java.lang.String)value);
      }
      break;

    case DSCODE:
      if (value == null) {
        unsetDscode();
      } else {
        setDscode((java.lang.Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case TRACE:
      if (value == null) {
        unsetTrace();
      } else {
        setTrace((com.lsy.knowledge.traffic.base.domain.thrift.Trace)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case X:
      return getX();

    case Y:
      return getY();

    case TIMESTAMP:
      return getTimestamp();

    case TYPE:
      return getType();

    case ACCURACY:
      return getAccuracy();

    case DIRECTION:
      return getDirection();

    case SPEED:
      return getSpeed();

    case ACCELERATED_SPEED_X:
      return getAcceleratedSpeedX();

    case ACCELERATED_SPEED_Y:
      return getAcceleratedSpeedY();

    case ACCELERATED_SPEED_Z:
      return getAcceleratedSpeedZ();

    case INCLUDED_ANGLE_YAW:
      return getIncludedAngleYaw();

    case INCLUDED_ANGLE_ROLL:
      return getIncludedAngleRoll();

    case INCLUDED_ANGLE_PITCH:
      return getIncludedAnglePitch();

    case PULL_PEER:
      return isPull_peer();

    case PRE_LNG:
      return getPre_lng();

    case PRE_LAT:
      return getPre_lat();

    case STATE:
      return getState();

    case GPS_SOURCE:
      return getGps_source();

    case BIZSTATUS:
      return getBizstatus();

    case BUSINESS_LINE:
      return getBusinessLine();

    case ABOVE_SEA_LEVEL:
      return getAboveSeaLevel();

    case PRESSURE:
      return getPressure();

    case SPECIFICTYPE:
      return getSpecifictype();

    case SPECIFIC:
      return getSpecific();

    case DSCODE:
      return getDscode();

    case ID:
      return getId();

    case TRACE:
      return getTrace();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case TIMESTAMP:
      return isSetTimestamp();
    case TYPE:
      return isSetType();
    case ACCURACY:
      return isSetAccuracy();
    case DIRECTION:
      return isSetDirection();
    case SPEED:
      return isSetSpeed();
    case ACCELERATED_SPEED_X:
      return isSetAcceleratedSpeedX();
    case ACCELERATED_SPEED_Y:
      return isSetAcceleratedSpeedY();
    case ACCELERATED_SPEED_Z:
      return isSetAcceleratedSpeedZ();
    case INCLUDED_ANGLE_YAW:
      return isSetIncludedAngleYaw();
    case INCLUDED_ANGLE_ROLL:
      return isSetIncludedAngleRoll();
    case INCLUDED_ANGLE_PITCH:
      return isSetIncludedAnglePitch();
    case PULL_PEER:
      return isSetPull_peer();
    case PRE_LNG:
      return isSetPre_lng();
    case PRE_LAT:
      return isSetPre_lat();
    case STATE:
      return isSetState();
    case GPS_SOURCE:
      return isSetGps_source();
    case BIZSTATUS:
      return isSetBizstatus();
    case BUSINESS_LINE:
      return isSetBusinessLine();
    case ABOVE_SEA_LEVEL:
      return isSetAboveSeaLevel();
    case PRESSURE:
      return isSetPressure();
    case SPECIFICTYPE:
      return isSetSpecifictype();
    case SPECIFIC:
      return isSetSpecific();
    case DSCODE:
      return isSetDscode();
    case ID:
      return isSetId();
    case TRACE:
      return isSetTrace();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof time_point_t)
      return this.equals((time_point_t)that);
    return false;
  }

  public boolean equals(time_point_t that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_accuracy = true;
    boolean that_present_accuracy = true;
    if (this_present_accuracy || that_present_accuracy) {
      if (!(this_present_accuracy && that_present_accuracy))
        return false;
      if (this.accuracy != that.accuracy)
        return false;
    }

    boolean this_present_direction = true;
    boolean that_present_direction = true;
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_speed = true;
    boolean that_present_speed = true;
    if (this_present_speed || that_present_speed) {
      if (!(this_present_speed && that_present_speed))
        return false;
      if (this.speed != that.speed)
        return false;
    }

    boolean this_present_acceleratedSpeedX = true;
    boolean that_present_acceleratedSpeedX = true;
    if (this_present_acceleratedSpeedX || that_present_acceleratedSpeedX) {
      if (!(this_present_acceleratedSpeedX && that_present_acceleratedSpeedX))
        return false;
      if (this.acceleratedSpeedX != that.acceleratedSpeedX)
        return false;
    }

    boolean this_present_acceleratedSpeedY = true;
    boolean that_present_acceleratedSpeedY = true;
    if (this_present_acceleratedSpeedY || that_present_acceleratedSpeedY) {
      if (!(this_present_acceleratedSpeedY && that_present_acceleratedSpeedY))
        return false;
      if (this.acceleratedSpeedY != that.acceleratedSpeedY)
        return false;
    }

    boolean this_present_acceleratedSpeedZ = true;
    boolean that_present_acceleratedSpeedZ = true;
    if (this_present_acceleratedSpeedZ || that_present_acceleratedSpeedZ) {
      if (!(this_present_acceleratedSpeedZ && that_present_acceleratedSpeedZ))
        return false;
      if (this.acceleratedSpeedZ != that.acceleratedSpeedZ)
        return false;
    }

    boolean this_present_includedAngleYaw = true;
    boolean that_present_includedAngleYaw = true;
    if (this_present_includedAngleYaw || that_present_includedAngleYaw) {
      if (!(this_present_includedAngleYaw && that_present_includedAngleYaw))
        return false;
      if (this.includedAngleYaw != that.includedAngleYaw)
        return false;
    }

    boolean this_present_includedAngleRoll = true;
    boolean that_present_includedAngleRoll = true;
    if (this_present_includedAngleRoll || that_present_includedAngleRoll) {
      if (!(this_present_includedAngleRoll && that_present_includedAngleRoll))
        return false;
      if (this.includedAngleRoll != that.includedAngleRoll)
        return false;
    }

    boolean this_present_includedAnglePitch = true;
    boolean that_present_includedAnglePitch = true;
    if (this_present_includedAnglePitch || that_present_includedAnglePitch) {
      if (!(this_present_includedAnglePitch && that_present_includedAnglePitch))
        return false;
      if (this.includedAnglePitch != that.includedAnglePitch)
        return false;
    }

    boolean this_present_pull_peer = true;
    boolean that_present_pull_peer = true;
    if (this_present_pull_peer || that_present_pull_peer) {
      if (!(this_present_pull_peer && that_present_pull_peer))
        return false;
      if (this.pull_peer != that.pull_peer)
        return false;
    }

    boolean this_present_pre_lng = true;
    boolean that_present_pre_lng = true;
    if (this_present_pre_lng || that_present_pre_lng) {
      if (!(this_present_pre_lng && that_present_pre_lng))
        return false;
      if (this.pre_lng != that.pre_lng)
        return false;
    }

    boolean this_present_pre_lat = true;
    boolean that_present_pre_lat = true;
    if (this_present_pre_lat || that_present_pre_lat) {
      if (!(this_present_pre_lat && that_present_pre_lat))
        return false;
      if (this.pre_lat != that.pre_lat)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_gps_source = true && this.isSetGps_source();
    boolean that_present_gps_source = true && that.isSetGps_source();
    if (this_present_gps_source || that_present_gps_source) {
      if (!(this_present_gps_source && that_present_gps_source))
        return false;
      if (!this.gps_source.equals(that.gps_source))
        return false;
    }

    boolean this_present_bizstatus = true;
    boolean that_present_bizstatus = true;
    if (this_present_bizstatus || that_present_bizstatus) {
      if (!(this_present_bizstatus && that_present_bizstatus))
        return false;
      if (this.bizstatus != that.bizstatus)
        return false;
    }

    boolean this_present_businessLine = true;
    boolean that_present_businessLine = true;
    if (this_present_businessLine || that_present_businessLine) {
      if (!(this_present_businessLine && that_present_businessLine))
        return false;
      if (this.businessLine != that.businessLine)
        return false;
    }

    boolean this_present_aboveSeaLevel = true;
    boolean that_present_aboveSeaLevel = true;
    if (this_present_aboveSeaLevel || that_present_aboveSeaLevel) {
      if (!(this_present_aboveSeaLevel && that_present_aboveSeaLevel))
        return false;
      if (this.aboveSeaLevel != that.aboveSeaLevel)
        return false;
    }

    boolean this_present_pressure = true;
    boolean that_present_pressure = true;
    if (this_present_pressure || that_present_pressure) {
      if (!(this_present_pressure && that_present_pressure))
        return false;
      if (this.pressure != that.pressure)
        return false;
    }

    boolean this_present_specifictype = true;
    boolean that_present_specifictype = true;
    if (this_present_specifictype || that_present_specifictype) {
      if (!(this_present_specifictype && that_present_specifictype))
        return false;
      if (this.specifictype != that.specifictype)
        return false;
    }

    boolean this_present_specific = true && this.isSetSpecific();
    boolean that_present_specific = true && that.isSetSpecific();
    if (this_present_specific || that_present_specific) {
      if (!(this_present_specific && that_present_specific))
        return false;
      if (!this.specific.equals(that.specific))
        return false;
    }

    boolean this_present_dscode = true;
    boolean that_present_dscode = true;
    if (this_present_dscode || that_present_dscode) {
      if (!(this_present_dscode && that_present_dscode))
        return false;
      if (this.dscode != that.dscode)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_trace = true && this.isSetTrace();
    boolean that_present_trace = true && that.isSetTrace();
    if (this_present_trace || that_present_trace) {
      if (!(this_present_trace && that_present_trace))
        return false;
      if (!this.trace.equals(that.trace))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + x;

    hashCode = hashCode * 8191 + y;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accuracy);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(direction);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(speed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(acceleratedSpeedX);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(acceleratedSpeedY);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(acceleratedSpeedZ);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(includedAngleYaw);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(includedAngleRoll);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(includedAnglePitch);

    hashCode = hashCode * 8191 + ((pull_peer) ? 131071 : 524287);

    hashCode = hashCode * 8191 + pre_lng;

    hashCode = hashCode * 8191 + pre_lat;

    hashCode = hashCode * 8191 + state;

    hashCode = hashCode * 8191 + ((isSetGps_source()) ? 131071 : 524287);
    if (isSetGps_source())
      hashCode = hashCode * 8191 + gps_source.getValue();

    hashCode = hashCode * 8191 + bizstatus;

    hashCode = hashCode * 8191 + businessLine;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(aboveSeaLevel);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pressure);

    hashCode = hashCode * 8191 + specifictype;

    hashCode = hashCode * 8191 + ((isSetSpecific()) ? 131071 : 524287);
    if (isSetSpecific())
      hashCode = hashCode * 8191 + specific.hashCode();

    hashCode = hashCode * 8191 + dscode;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrace()) ? 131071 : 524287);
    if (isSetTrace())
      hashCode = hashCode * 8191 + trace.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(time_point_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccuracy()).compareTo(other.isSetAccuracy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccuracy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accuracy, other.accuracy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpeed()).compareTo(other.isSetSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speed, other.speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAcceleratedSpeedX()).compareTo(other.isSetAcceleratedSpeedX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceleratedSpeedX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceleratedSpeedX, other.acceleratedSpeedX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAcceleratedSpeedY()).compareTo(other.isSetAcceleratedSpeedY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceleratedSpeedY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceleratedSpeedY, other.acceleratedSpeedY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAcceleratedSpeedZ()).compareTo(other.isSetAcceleratedSpeedZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceleratedSpeedZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceleratedSpeedZ, other.acceleratedSpeedZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIncludedAngleYaw()).compareTo(other.isSetIncludedAngleYaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludedAngleYaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includedAngleYaw, other.includedAngleYaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIncludedAngleRoll()).compareTo(other.isSetIncludedAngleRoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludedAngleRoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includedAngleRoll, other.includedAngleRoll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIncludedAnglePitch()).compareTo(other.isSetIncludedAnglePitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludedAnglePitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includedAnglePitch, other.includedAnglePitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPull_peer()).compareTo(other.isSetPull_peer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPull_peer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pull_peer, other.pull_peer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPre_lng()).compareTo(other.isSetPre_lng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPre_lng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre_lng, other.pre_lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPre_lat()).compareTo(other.isSetPre_lat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPre_lat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre_lat, other.pre_lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGps_source()).compareTo(other.isSetGps_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGps_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gps_source, other.gps_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBizstatus()).compareTo(other.isSetBizstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizstatus, other.bizstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBusinessLine()).compareTo(other.isSetBusinessLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessLine, other.businessLine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAboveSeaLevel()).compareTo(other.isSetAboveSeaLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAboveSeaLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aboveSeaLevel, other.aboveSeaLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPressure()).compareTo(other.isSetPressure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressure, other.pressure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpecifictype()).compareTo(other.isSetSpecifictype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecifictype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specifictype, other.specifictype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpecific()).compareTo(other.isSetSpecific());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecific()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specific, other.specific);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDscode()).compareTo(other.isSetDscode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDscode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dscode, other.dscode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTrace()).compareTo(other.isSetTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace, other.trace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("time_point_t(");
    boolean first = true;

    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accuracy:");
    sb.append(this.accuracy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    sb.append(this.direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("speed:");
    sb.append(this.speed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceleratedSpeedX:");
    sb.append(this.acceleratedSpeedX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceleratedSpeedY:");
    sb.append(this.acceleratedSpeedY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceleratedSpeedZ:");
    sb.append(this.acceleratedSpeedZ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includedAngleYaw:");
    sb.append(this.includedAngleYaw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includedAngleRoll:");
    sb.append(this.includedAngleRoll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includedAnglePitch:");
    sb.append(this.includedAnglePitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pull_peer:");
    sb.append(this.pull_peer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pre_lng:");
    sb.append(this.pre_lng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pre_lat:");
    sb.append(this.pre_lat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gps_source:");
    if (this.gps_source == null) {
      sb.append("null");
    } else {
      sb.append(this.gps_source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizstatus:");
    sb.append(this.bizstatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessLine:");
    sb.append(this.businessLine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aboveSeaLevel:");
    sb.append(this.aboveSeaLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pressure:");
    sb.append(this.pressure);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specifictype:");
    sb.append(this.specifictype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specific:");
    if (this.specific == null) {
      sb.append("null");
    } else {
      sb.append(this.specific);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dscode:");
    sb.append(this.dscode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetTrace()) {
      if (!first) sb.append(", ");
      sb.append("trace:");
      if (this.trace == null) {
        sb.append("null");
      } else {
        sb.append(this.trace);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (trace != null) {
      trace.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class time_point_tStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public time_point_tStandardScheme getScheme() {
      return new time_point_tStandardScheme();
    }
  }

  private static class time_point_tStandardScheme extends org.apache.thrift.scheme.StandardScheme<time_point_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, time_point_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.x = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lsy.knowledge.traffic.base.domain.thrift.CoordinateType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCURACY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accuracy = iprot.readDouble();
              struct.setAccuracyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.direction = iprot.readDouble();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.speed = iprot.readDouble();
              struct.setSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCELERATED_SPEED_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acceleratedSpeedX = iprot.readDouble();
              struct.setAcceleratedSpeedXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACCELERATED_SPEED_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acceleratedSpeedY = iprot.readDouble();
              struct.setAcceleratedSpeedYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCELERATED_SPEED_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acceleratedSpeedZ = iprot.readDouble();
              struct.setAcceleratedSpeedZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INCLUDED_ANGLE_YAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.includedAngleYaw = iprot.readDouble();
              struct.setIncludedAngleYawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INCLUDED_ANGLE_ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.includedAngleRoll = iprot.readDouble();
              struct.setIncludedAngleRollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INCLUDED_ANGLE_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.includedAnglePitch = iprot.readDouble();
              struct.setIncludedAnglePitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PULL_PEER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pull_peer = iprot.readBool();
              struct.setPull_peerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRE_LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pre_lng = iprot.readI32();
              struct.setPre_lngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRE_LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pre_lat = iprot.readI32();
              struct.setPre_latIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GPS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gps_source = com.lsy.knowledge.traffic.base.domain.thrift.GPSSource.findByValue(iprot.readI32());
              struct.setGps_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BIZSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizstatus = iprot.readI32();
              struct.setBizstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUSINESS_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessLine = iprot.readI32();
              struct.setBusinessLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ABOVE_SEA_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.aboveSeaLevel = iprot.readDouble();
              struct.setAboveSeaLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRESSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pressure = iprot.readDouble();
              struct.setPressureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SPECIFICTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specifictype = iprot.readI32();
              struct.setSpecifictypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SPECIFIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specific = iprot.readString();
              struct.setSpecificIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DSCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dscode = iprot.readI32();
              struct.setDscodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.trace = new com.lsy.knowledge.traffic.base.domain.thrift.Trace();
              struct.trace.read(iprot);
              struct.setTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, time_point_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCURACY_FIELD_DESC);
      oprot.writeDouble(struct.accuracy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
      oprot.writeDouble(struct.direction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPEED_FIELD_DESC);
      oprot.writeDouble(struct.speed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCELERATED_SPEED_X_FIELD_DESC);
      oprot.writeDouble(struct.acceleratedSpeedX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCELERATED_SPEED_Y_FIELD_DESC);
      oprot.writeDouble(struct.acceleratedSpeedY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCELERATED_SPEED_Z_FIELD_DESC);
      oprot.writeDouble(struct.acceleratedSpeedZ);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDED_ANGLE_YAW_FIELD_DESC);
      oprot.writeDouble(struct.includedAngleYaw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDED_ANGLE_ROLL_FIELD_DESC);
      oprot.writeDouble(struct.includedAngleRoll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDED_ANGLE_PITCH_FIELD_DESC);
      oprot.writeDouble(struct.includedAnglePitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PULL_PEER_FIELD_DESC);
      oprot.writeBool(struct.pull_peer);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_LNG_FIELD_DESC);
      oprot.writeI32(struct.pre_lng);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_LAT_FIELD_DESC);
      oprot.writeI32(struct.pre_lat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.gps_source != null) {
        oprot.writeFieldBegin(GPS_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.gps_source.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIZSTATUS_FIELD_DESC);
      oprot.writeI32(struct.bizstatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_LINE_FIELD_DESC);
      oprot.writeI32(struct.businessLine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ABOVE_SEA_LEVEL_FIELD_DESC);
      oprot.writeDouble(struct.aboveSeaLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRESSURE_FIELD_DESC);
      oprot.writeDouble(struct.pressure);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIFICTYPE_FIELD_DESC);
      oprot.writeI32(struct.specifictype);
      oprot.writeFieldEnd();
      if (struct.specific != null) {
        oprot.writeFieldBegin(SPECIFIC_FIELD_DESC);
        oprot.writeString(struct.specific);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DSCODE_FIELD_DESC);
      oprot.writeI32(struct.dscode);
      oprot.writeFieldEnd();
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.trace != null) {
        if (struct.isSetTrace()) {
          oprot.writeFieldBegin(TRACE_FIELD_DESC);
          struct.trace.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class time_point_tTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public time_point_tTupleScheme getScheme() {
      return new time_point_tTupleScheme();
    }
  }

  private static class time_point_tTupleScheme extends org.apache.thrift.scheme.TupleScheme<time_point_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, time_point_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetX()) {
        optionals.set(0);
      }
      if (struct.isSetY()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetAccuracy()) {
        optionals.set(4);
      }
      if (struct.isSetDirection()) {
        optionals.set(5);
      }
      if (struct.isSetSpeed()) {
        optionals.set(6);
      }
      if (struct.isSetAcceleratedSpeedX()) {
        optionals.set(7);
      }
      if (struct.isSetAcceleratedSpeedY()) {
        optionals.set(8);
      }
      if (struct.isSetAcceleratedSpeedZ()) {
        optionals.set(9);
      }
      if (struct.isSetIncludedAngleYaw()) {
        optionals.set(10);
      }
      if (struct.isSetIncludedAngleRoll()) {
        optionals.set(11);
      }
      if (struct.isSetIncludedAnglePitch()) {
        optionals.set(12);
      }
      if (struct.isSetPull_peer()) {
        optionals.set(13);
      }
      if (struct.isSetPre_lng()) {
        optionals.set(14);
      }
      if (struct.isSetPre_lat()) {
        optionals.set(15);
      }
      if (struct.isSetState()) {
        optionals.set(16);
      }
      if (struct.isSetGps_source()) {
        optionals.set(17);
      }
      if (struct.isSetBizstatus()) {
        optionals.set(18);
      }
      if (struct.isSetBusinessLine()) {
        optionals.set(19);
      }
      if (struct.isSetAboveSeaLevel()) {
        optionals.set(20);
      }
      if (struct.isSetPressure()) {
        optionals.set(21);
      }
      if (struct.isSetSpecifictype()) {
        optionals.set(22);
      }
      if (struct.isSetSpecific()) {
        optionals.set(23);
      }
      if (struct.isSetDscode()) {
        optionals.set(24);
      }
      if (struct.isSetId()) {
        optionals.set(25);
      }
      if (struct.isSetTrace()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetX()) {
        oprot.writeI32(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeI32(struct.y);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetAccuracy()) {
        oprot.writeDouble(struct.accuracy);
      }
      if (struct.isSetDirection()) {
        oprot.writeDouble(struct.direction);
      }
      if (struct.isSetSpeed()) {
        oprot.writeDouble(struct.speed);
      }
      if (struct.isSetAcceleratedSpeedX()) {
        oprot.writeDouble(struct.acceleratedSpeedX);
      }
      if (struct.isSetAcceleratedSpeedY()) {
        oprot.writeDouble(struct.acceleratedSpeedY);
      }
      if (struct.isSetAcceleratedSpeedZ()) {
        oprot.writeDouble(struct.acceleratedSpeedZ);
      }
      if (struct.isSetIncludedAngleYaw()) {
        oprot.writeDouble(struct.includedAngleYaw);
      }
      if (struct.isSetIncludedAngleRoll()) {
        oprot.writeDouble(struct.includedAngleRoll);
      }
      if (struct.isSetIncludedAnglePitch()) {
        oprot.writeDouble(struct.includedAnglePitch);
      }
      if (struct.isSetPull_peer()) {
        oprot.writeBool(struct.pull_peer);
      }
      if (struct.isSetPre_lng()) {
        oprot.writeI32(struct.pre_lng);
      }
      if (struct.isSetPre_lat()) {
        oprot.writeI32(struct.pre_lat);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetGps_source()) {
        oprot.writeI32(struct.gps_source.getValue());
      }
      if (struct.isSetBizstatus()) {
        oprot.writeI32(struct.bizstatus);
      }
      if (struct.isSetBusinessLine()) {
        oprot.writeI32(struct.businessLine);
      }
      if (struct.isSetAboveSeaLevel()) {
        oprot.writeDouble(struct.aboveSeaLevel);
      }
      if (struct.isSetPressure()) {
        oprot.writeDouble(struct.pressure);
      }
      if (struct.isSetSpecifictype()) {
        oprot.writeI32(struct.specifictype);
      }
      if (struct.isSetSpecific()) {
        oprot.writeString(struct.specific);
      }
      if (struct.isSetDscode()) {
        oprot.writeI32(struct.dscode);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTrace()) {
        struct.trace.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, time_point_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.x = iprot.readI32();
        struct.setXIsSet(true);
      }
      if (incoming.get(1)) {
        struct.y = iprot.readI32();
        struct.setYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = com.lsy.knowledge.traffic.base.domain.thrift.CoordinateType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accuracy = iprot.readDouble();
        struct.setAccuracyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.direction = iprot.readDouble();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.speed = iprot.readDouble();
        struct.setSpeedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.acceleratedSpeedX = iprot.readDouble();
        struct.setAcceleratedSpeedXIsSet(true);
      }
      if (incoming.get(8)) {
        struct.acceleratedSpeedY = iprot.readDouble();
        struct.setAcceleratedSpeedYIsSet(true);
      }
      if (incoming.get(9)) {
        struct.acceleratedSpeedZ = iprot.readDouble();
        struct.setAcceleratedSpeedZIsSet(true);
      }
      if (incoming.get(10)) {
        struct.includedAngleYaw = iprot.readDouble();
        struct.setIncludedAngleYawIsSet(true);
      }
      if (incoming.get(11)) {
        struct.includedAngleRoll = iprot.readDouble();
        struct.setIncludedAngleRollIsSet(true);
      }
      if (incoming.get(12)) {
        struct.includedAnglePitch = iprot.readDouble();
        struct.setIncludedAnglePitchIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pull_peer = iprot.readBool();
        struct.setPull_peerIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pre_lng = iprot.readI32();
        struct.setPre_lngIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pre_lat = iprot.readI32();
        struct.setPre_latIsSet(true);
      }
      if (incoming.get(16)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.gps_source = com.lsy.knowledge.traffic.base.domain.thrift.GPSSource.findByValue(iprot.readI32());
        struct.setGps_sourceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.bizstatus = iprot.readI32();
        struct.setBizstatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.businessLine = iprot.readI32();
        struct.setBusinessLineIsSet(true);
      }
      if (incoming.get(20)) {
        struct.aboveSeaLevel = iprot.readDouble();
        struct.setAboveSeaLevelIsSet(true);
      }
      if (incoming.get(21)) {
        struct.pressure = iprot.readDouble();
        struct.setPressureIsSet(true);
      }
      if (incoming.get(22)) {
        struct.specifictype = iprot.readI32();
        struct.setSpecifictypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.specific = iprot.readString();
        struct.setSpecificIsSet(true);
      }
      if (incoming.get(24)) {
        struct.dscode = iprot.readI32();
        struct.setDscodeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.trace = new com.lsy.knowledge.traffic.base.domain.thrift.Trace();
        struct.trace.read(iprot);
        struct.setTraceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

