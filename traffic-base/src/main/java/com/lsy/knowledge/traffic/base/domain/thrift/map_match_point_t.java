/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsy.knowledge.traffic.base.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-27")
public class map_match_point_t implements org.apache.thrift.TBase<map_match_point_t, map_match_point_t._Fields>, java.io.Serializable, Cloneable, Comparable<map_match_point_t> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("map_match_point_t");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRAJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traj_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_X_FIELD_DESC = new org.apache.thrift.protocol.TField("src_x", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("src_y", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField POINT_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("point_speed", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField POINT_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("point_direction", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField LINE_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("line_speed", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LINE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("line_direction", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField LINK_ID_VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("link_id_vec", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LINK_PASS_DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("link_pass_dist", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PROJ_X_FIELD_DESC = new org.apache.thrift.protocol.TField("proj_x", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PROJ_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("proj_y", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CERTAINTY_FIELD_DESC = new org.apache.thrift.protocol.TField("certainty", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField BIZTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("biztype", org.apache.thrift.protocol.TType.I16, (short)16);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I16, (short)17);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MAP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("map_version", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BIZSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bizstatus", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("trace", org.apache.thrift.protocol.TType.STRUCT, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new map_match_point_tStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new map_match_point_tTupleSchemeFactory();

  public int id; // required
  public java.lang.String traj_id; // required
  public int src_x; // required
  public int src_y; // required
  public java.lang.String user_id; // required
  public long timestamp; // required
  public double point_speed; // required
  public double point_direction; // required
  public double line_speed; // required
  public double line_direction; // required
  public java.util.List<java.lang.Long> link_id_vec; // required
  public int link_pass_dist; // required
  public int proj_x; // required
  public int proj_y; // required
  public int certainty; // required
  public short biztype; // required
  public short role; // required
  public java.lang.String phone; // required
  public java.lang.String map_version; // required
  public int bizstatus; // required
  public com.lsy.knowledge.traffic.base.domain.thrift.Trace trace; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TRAJ_ID((short)2, "traj_id"),
    SRC_X((short)3, "src_x"),
    SRC_Y((short)4, "src_y"),
    USER_ID((short)5, "user_id"),
    TIMESTAMP((short)6, "timestamp"),
    POINT_SPEED((short)7, "point_speed"),
    POINT_DIRECTION((short)8, "point_direction"),
    LINE_SPEED((short)9, "line_speed"),
    LINE_DIRECTION((short)10, "line_direction"),
    LINK_ID_VEC((short)11, "link_id_vec"),
    LINK_PASS_DIST((short)12, "link_pass_dist"),
    PROJ_X((short)13, "proj_x"),
    PROJ_Y((short)14, "proj_y"),
    CERTAINTY((short)15, "certainty"),
    BIZTYPE((short)16, "biztype"),
    ROLE((short)17, "role"),
    PHONE((short)18, "phone"),
    MAP_VERSION((short)19, "map_version"),
    BIZSTATUS((short)20, "bizstatus"),
    TRACE((short)21, "trace");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TRAJ_ID
          return TRAJ_ID;
        case 3: // SRC_X
          return SRC_X;
        case 4: // SRC_Y
          return SRC_Y;
        case 5: // USER_ID
          return USER_ID;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // POINT_SPEED
          return POINT_SPEED;
        case 8: // POINT_DIRECTION
          return POINT_DIRECTION;
        case 9: // LINE_SPEED
          return LINE_SPEED;
        case 10: // LINE_DIRECTION
          return LINE_DIRECTION;
        case 11: // LINK_ID_VEC
          return LINK_ID_VEC;
        case 12: // LINK_PASS_DIST
          return LINK_PASS_DIST;
        case 13: // PROJ_X
          return PROJ_X;
        case 14: // PROJ_Y
          return PROJ_Y;
        case 15: // CERTAINTY
          return CERTAINTY;
        case 16: // BIZTYPE
          return BIZTYPE;
        case 17: // ROLE
          return ROLE;
        case 18: // PHONE
          return PHONE;
        case 19: // MAP_VERSION
          return MAP_VERSION;
        case 20: // BIZSTATUS
          return BIZSTATUS;
        case 21: // TRACE
          return TRACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SRC_X_ISSET_ID = 1;
  private static final int __SRC_Y_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private static final int __POINT_SPEED_ISSET_ID = 4;
  private static final int __POINT_DIRECTION_ISSET_ID = 5;
  private static final int __LINE_SPEED_ISSET_ID = 6;
  private static final int __LINE_DIRECTION_ISSET_ID = 7;
  private static final int __LINK_PASS_DIST_ISSET_ID = 8;
  private static final int __PROJ_X_ISSET_ID = 9;
  private static final int __PROJ_Y_ISSET_ID = 10;
  private static final int __CERTAINTY_ISSET_ID = 11;
  private static final int __BIZTYPE_ISSET_ID = 12;
  private static final int __ROLE_ISSET_ID = 13;
  private static final int __BIZSTATUS_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRACE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRAJ_ID, new org.apache.thrift.meta_data.FieldMetaData("traj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_X, new org.apache.thrift.meta_data.FieldMetaData("src_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.SRC_Y, new org.apache.thrift.meta_data.FieldMetaData("src_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "user_id_t")));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "time_t")));
    tmpMap.put(_Fields.POINT_SPEED, new org.apache.thrift.meta_data.FieldMetaData("point_speed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("point_direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LINE_SPEED, new org.apache.thrift.meta_data.FieldMetaData("line_speed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LINE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("line_direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LINK_ID_VEC, new org.apache.thrift.meta_data.FieldMetaData("link_id_vec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "esiwei_link_id_t"))));
    tmpMap.put(_Fields.LINK_PASS_DIST, new org.apache.thrift.meta_data.FieldMetaData("link_pass_dist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJ_X, new org.apache.thrift.meta_data.FieldMetaData("proj_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.PROJ_Y, new org.apache.thrift.meta_data.FieldMetaData("proj_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "coord_t")));
    tmpMap.put(_Fields.CERTAINTY, new org.apache.thrift.meta_data.FieldMetaData("certainty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIZTYPE, new org.apache.thrift.meta_data.FieldMetaData("biztype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("map_version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZSTATUS, new org.apache.thrift.meta_data.FieldMetaData("bizstatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRACE, new org.apache.thrift.meta_data.FieldMetaData("trace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lsy.knowledge.traffic.base.domain.thrift.Trace.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(map_match_point_t.class, metaDataMap);
  }

  public map_match_point_t() {
  }

  public map_match_point_t(
    int id,
    java.lang.String traj_id,
    int src_x,
    int src_y,
    java.lang.String user_id,
    long timestamp,
    double point_speed,
    double point_direction,
    double line_speed,
    double line_direction,
    java.util.List<java.lang.Long> link_id_vec,
    int link_pass_dist,
    int proj_x,
    int proj_y,
    int certainty,
    short biztype,
    short role,
    java.lang.String phone,
    java.lang.String map_version,
    int bizstatus)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.traj_id = traj_id;
    this.src_x = src_x;
    setSrc_xIsSet(true);
    this.src_y = src_y;
    setSrc_yIsSet(true);
    this.user_id = user_id;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.point_speed = point_speed;
    setPoint_speedIsSet(true);
    this.point_direction = point_direction;
    setPoint_directionIsSet(true);
    this.line_speed = line_speed;
    setLine_speedIsSet(true);
    this.line_direction = line_direction;
    setLine_directionIsSet(true);
    this.link_id_vec = link_id_vec;
    this.link_pass_dist = link_pass_dist;
    setLink_pass_distIsSet(true);
    this.proj_x = proj_x;
    setProj_xIsSet(true);
    this.proj_y = proj_y;
    setProj_yIsSet(true);
    this.certainty = certainty;
    setCertaintyIsSet(true);
    this.biztype = biztype;
    setBiztypeIsSet(true);
    this.role = role;
    setRoleIsSet(true);
    this.phone = phone;
    this.map_version = map_version;
    this.bizstatus = bizstatus;
    setBizstatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public map_match_point_t(map_match_point_t other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTraj_id()) {
      this.traj_id = other.traj_id;
    }
    this.src_x = other.src_x;
    this.src_y = other.src_y;
    if (other.isSetUser_id()) {
      this.user_id = other.user_id;
    }
    this.timestamp = other.timestamp;
    this.point_speed = other.point_speed;
    this.point_direction = other.point_direction;
    this.line_speed = other.line_speed;
    this.line_direction = other.line_direction;
    if (other.isSetLink_id_vec()) {
      java.util.List<java.lang.Long> __this__link_id_vec = new java.util.ArrayList<java.lang.Long>(other.link_id_vec.size());
      for (java.lang.Long other_element : other.link_id_vec) {
        __this__link_id_vec.add(other_element);
      }
      this.link_id_vec = __this__link_id_vec;
    }
    this.link_pass_dist = other.link_pass_dist;
    this.proj_x = other.proj_x;
    this.proj_y = other.proj_y;
    this.certainty = other.certainty;
    this.biztype = other.biztype;
    this.role = other.role;
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetMap_version()) {
      this.map_version = other.map_version;
    }
    this.bizstatus = other.bizstatus;
    if (other.isSetTrace()) {
      this.trace = new com.lsy.knowledge.traffic.base.domain.thrift.Trace(other.trace);
    }
  }

  public map_match_point_t deepCopy() {
    return new map_match_point_t(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.traj_id = null;
    setSrc_xIsSet(false);
    this.src_x = 0;
    setSrc_yIsSet(false);
    this.src_y = 0;
    this.user_id = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setPoint_speedIsSet(false);
    this.point_speed = 0.0;
    setPoint_directionIsSet(false);
    this.point_direction = 0.0;
    setLine_speedIsSet(false);
    this.line_speed = 0.0;
    setLine_directionIsSet(false);
    this.line_direction = 0.0;
    this.link_id_vec = null;
    setLink_pass_distIsSet(false);
    this.link_pass_dist = 0;
    setProj_xIsSet(false);
    this.proj_x = 0;
    setProj_yIsSet(false);
    this.proj_y = 0;
    setCertaintyIsSet(false);
    this.certainty = 0;
    setBiztypeIsSet(false);
    this.biztype = 0;
    setRoleIsSet(false);
    this.role = 0;
    this.phone = null;
    this.map_version = null;
    setBizstatusIsSet(false);
    this.bizstatus = 0;
    this.trace = null;
  }

  public int getId() {
    return this.id;
  }

  public map_match_point_t setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getTraj_id() {
    return this.traj_id;
  }

  public map_match_point_t setTraj_id(java.lang.String traj_id) {
    this.traj_id = traj_id;
    return this;
  }

  public void unsetTraj_id() {
    this.traj_id = null;
  }

  /** Returns true if field traj_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTraj_id() {
    return this.traj_id != null;
  }

  public void setTraj_idIsSet(boolean value) {
    if (!value) {
      this.traj_id = null;
    }
  }

  public int getSrc_x() {
    return this.src_x;
  }

  public map_match_point_t setSrc_x(int src_x) {
    this.src_x = src_x;
    setSrc_xIsSet(true);
    return this;
  }

  public void unsetSrc_x() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_X_ISSET_ID);
  }

  /** Returns true if field src_x is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_x() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_X_ISSET_ID);
  }

  public void setSrc_xIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_X_ISSET_ID, value);
  }

  public int getSrc_y() {
    return this.src_y;
  }

  public map_match_point_t setSrc_y(int src_y) {
    this.src_y = src_y;
    setSrc_yIsSet(true);
    return this;
  }

  public void unsetSrc_y() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_Y_ISSET_ID);
  }

  /** Returns true if field src_y is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_y() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_Y_ISSET_ID);
  }

  public void setSrc_yIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_Y_ISSET_ID, value);
  }

  public java.lang.String getUser_id() {
    return this.user_id;
  }

  public map_match_point_t setUser_id(java.lang.String user_id) {
    this.user_id = user_id;
    return this;
  }

  public void unsetUser_id() {
    this.user_id = null;
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return this.user_id != null;
  }

  public void setUser_idIsSet(boolean value) {
    if (!value) {
      this.user_id = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public map_match_point_t setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public double getPoint_speed() {
    return this.point_speed;
  }

  public map_match_point_t setPoint_speed(double point_speed) {
    this.point_speed = point_speed;
    setPoint_speedIsSet(true);
    return this;
  }

  public void unsetPoint_speed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT_SPEED_ISSET_ID);
  }

  /** Returns true if field point_speed is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint_speed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT_SPEED_ISSET_ID);
  }

  public void setPoint_speedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT_SPEED_ISSET_ID, value);
  }

  public double getPoint_direction() {
    return this.point_direction;
  }

  public map_match_point_t setPoint_direction(double point_direction) {
    this.point_direction = point_direction;
    setPoint_directionIsSet(true);
    return this;
  }

  public void unsetPoint_direction() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT_DIRECTION_ISSET_ID);
  }

  /** Returns true if field point_direction is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint_direction() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT_DIRECTION_ISSET_ID);
  }

  public void setPoint_directionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT_DIRECTION_ISSET_ID, value);
  }

  public double getLine_speed() {
    return this.line_speed;
  }

  public map_match_point_t setLine_speed(double line_speed) {
    this.line_speed = line_speed;
    setLine_speedIsSet(true);
    return this;
  }

  public void unsetLine_speed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINE_SPEED_ISSET_ID);
  }

  /** Returns true if field line_speed is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_speed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINE_SPEED_ISSET_ID);
  }

  public void setLine_speedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINE_SPEED_ISSET_ID, value);
  }

  public double getLine_direction() {
    return this.line_direction;
  }

  public map_match_point_t setLine_direction(double line_direction) {
    this.line_direction = line_direction;
    setLine_directionIsSet(true);
    return this;
  }

  public void unsetLine_direction() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINE_DIRECTION_ISSET_ID);
  }

  /** Returns true if field line_direction is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_direction() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINE_DIRECTION_ISSET_ID);
  }

  public void setLine_directionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINE_DIRECTION_ISSET_ID, value);
  }

  public int getLink_id_vecSize() {
    return (this.link_id_vec == null) ? 0 : this.link_id_vec.size();
  }

  public java.util.Iterator<java.lang.Long> getLink_id_vecIterator() {
    return (this.link_id_vec == null) ? null : this.link_id_vec.iterator();
  }

  public void addToLink_id_vec(long elem) {
    if (this.link_id_vec == null) {
      this.link_id_vec = new java.util.ArrayList<java.lang.Long>();
    }
    this.link_id_vec.add(elem);
  }

  public java.util.List<java.lang.Long> getLink_id_vec() {
    return this.link_id_vec;
  }

  public map_match_point_t setLink_id_vec(java.util.List<java.lang.Long> link_id_vec) {
    this.link_id_vec = link_id_vec;
    return this;
  }

  public void unsetLink_id_vec() {
    this.link_id_vec = null;
  }

  /** Returns true if field link_id_vec is set (has been assigned a value) and false otherwise */
  public boolean isSetLink_id_vec() {
    return this.link_id_vec != null;
  }

  public void setLink_id_vecIsSet(boolean value) {
    if (!value) {
      this.link_id_vec = null;
    }
  }

  public int getLink_pass_dist() {
    return this.link_pass_dist;
  }

  public map_match_point_t setLink_pass_dist(int link_pass_dist) {
    this.link_pass_dist = link_pass_dist;
    setLink_pass_distIsSet(true);
    return this;
  }

  public void unsetLink_pass_dist() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINK_PASS_DIST_ISSET_ID);
  }

  /** Returns true if field link_pass_dist is set (has been assigned a value) and false otherwise */
  public boolean isSetLink_pass_dist() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINK_PASS_DIST_ISSET_ID);
  }

  public void setLink_pass_distIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINK_PASS_DIST_ISSET_ID, value);
  }

  public int getProj_x() {
    return this.proj_x;
  }

  public map_match_point_t setProj_x(int proj_x) {
    this.proj_x = proj_x;
    setProj_xIsSet(true);
    return this;
  }

  public void unsetProj_x() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJ_X_ISSET_ID);
  }

  /** Returns true if field proj_x is set (has been assigned a value) and false otherwise */
  public boolean isSetProj_x() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJ_X_ISSET_ID);
  }

  public void setProj_xIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJ_X_ISSET_ID, value);
  }

  public int getProj_y() {
    return this.proj_y;
  }

  public map_match_point_t setProj_y(int proj_y) {
    this.proj_y = proj_y;
    setProj_yIsSet(true);
    return this;
  }

  public void unsetProj_y() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJ_Y_ISSET_ID);
  }

  /** Returns true if field proj_y is set (has been assigned a value) and false otherwise */
  public boolean isSetProj_y() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJ_Y_ISSET_ID);
  }

  public void setProj_yIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJ_Y_ISSET_ID, value);
  }

  public int getCertainty() {
    return this.certainty;
  }

  public map_match_point_t setCertainty(int certainty) {
    this.certainty = certainty;
    setCertaintyIsSet(true);
    return this;
  }

  public void unsetCertainty() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CERTAINTY_ISSET_ID);
  }

  /** Returns true if field certainty is set (has been assigned a value) and false otherwise */
  public boolean isSetCertainty() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CERTAINTY_ISSET_ID);
  }

  public void setCertaintyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CERTAINTY_ISSET_ID, value);
  }

  public short getBiztype() {
    return this.biztype;
  }

  public map_match_point_t setBiztype(short biztype) {
    this.biztype = biztype;
    setBiztypeIsSet(true);
    return this;
  }

  public void unsetBiztype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIZTYPE_ISSET_ID);
  }

  /** Returns true if field biztype is set (has been assigned a value) and false otherwise */
  public boolean isSetBiztype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIZTYPE_ISSET_ID);
  }

  public void setBiztypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIZTYPE_ISSET_ID, value);
  }

  public short getRole() {
    return this.role;
  }

  public map_match_point_t setRole(short role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public java.lang.String getPhone() {
    return this.phone;
  }

  public map_match_point_t setPhone(java.lang.String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public java.lang.String getMap_version() {
    return this.map_version;
  }

  public map_match_point_t setMap_version(java.lang.String map_version) {
    this.map_version = map_version;
    return this;
  }

  public void unsetMap_version() {
    this.map_version = null;
  }

  /** Returns true if field map_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_version() {
    return this.map_version != null;
  }

  public void setMap_versionIsSet(boolean value) {
    if (!value) {
      this.map_version = null;
    }
  }

  public int getBizstatus() {
    return this.bizstatus;
  }

  public map_match_point_t setBizstatus(int bizstatus) {
    this.bizstatus = bizstatus;
    setBizstatusIsSet(true);
    return this;
  }

  public void unsetBizstatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIZSTATUS_ISSET_ID);
  }

  /** Returns true if field bizstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBizstatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIZSTATUS_ISSET_ID);
  }

  public void setBizstatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIZSTATUS_ISSET_ID, value);
  }

  public com.lsy.knowledge.traffic.base.domain.thrift.Trace getTrace() {
    return this.trace;
  }

  public map_match_point_t setTrace(com.lsy.knowledge.traffic.base.domain.thrift.Trace trace) {
    this.trace = trace;
    return this;
  }

  public void unsetTrace() {
    this.trace = null;
  }

  /** Returns true if field trace is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace() {
    return this.trace != null;
  }

  public void setTraceIsSet(boolean value) {
    if (!value) {
      this.trace = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TRAJ_ID:
      if (value == null) {
        unsetTraj_id();
      } else {
        setTraj_id((java.lang.String)value);
      }
      break;

    case SRC_X:
      if (value == null) {
        unsetSrc_x();
      } else {
        setSrc_x((java.lang.Integer)value);
      }
      break;

    case SRC_Y:
      if (value == null) {
        unsetSrc_y();
      } else {
        setSrc_y((java.lang.Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case POINT_SPEED:
      if (value == null) {
        unsetPoint_speed();
      } else {
        setPoint_speed((java.lang.Double)value);
      }
      break;

    case POINT_DIRECTION:
      if (value == null) {
        unsetPoint_direction();
      } else {
        setPoint_direction((java.lang.Double)value);
      }
      break;

    case LINE_SPEED:
      if (value == null) {
        unsetLine_speed();
      } else {
        setLine_speed((java.lang.Double)value);
      }
      break;

    case LINE_DIRECTION:
      if (value == null) {
        unsetLine_direction();
      } else {
        setLine_direction((java.lang.Double)value);
      }
      break;

    case LINK_ID_VEC:
      if (value == null) {
        unsetLink_id_vec();
      } else {
        setLink_id_vec((java.util.List<java.lang.Long>)value);
      }
      break;

    case LINK_PASS_DIST:
      if (value == null) {
        unsetLink_pass_dist();
      } else {
        setLink_pass_dist((java.lang.Integer)value);
      }
      break;

    case PROJ_X:
      if (value == null) {
        unsetProj_x();
      } else {
        setProj_x((java.lang.Integer)value);
      }
      break;

    case PROJ_Y:
      if (value == null) {
        unsetProj_y();
      } else {
        setProj_y((java.lang.Integer)value);
      }
      break;

    case CERTAINTY:
      if (value == null) {
        unsetCertainty();
      } else {
        setCertainty((java.lang.Integer)value);
      }
      break;

    case BIZTYPE:
      if (value == null) {
        unsetBiztype();
      } else {
        setBiztype((java.lang.Short)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((java.lang.Short)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((java.lang.String)value);
      }
      break;

    case MAP_VERSION:
      if (value == null) {
        unsetMap_version();
      } else {
        setMap_version((java.lang.String)value);
      }
      break;

    case BIZSTATUS:
      if (value == null) {
        unsetBizstatus();
      } else {
        setBizstatus((java.lang.Integer)value);
      }
      break;

    case TRACE:
      if (value == null) {
        unsetTrace();
      } else {
        setTrace((com.lsy.knowledge.traffic.base.domain.thrift.Trace)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TRAJ_ID:
      return getTraj_id();

    case SRC_X:
      return getSrc_x();

    case SRC_Y:
      return getSrc_y();

    case USER_ID:
      return getUser_id();

    case TIMESTAMP:
      return getTimestamp();

    case POINT_SPEED:
      return getPoint_speed();

    case POINT_DIRECTION:
      return getPoint_direction();

    case LINE_SPEED:
      return getLine_speed();

    case LINE_DIRECTION:
      return getLine_direction();

    case LINK_ID_VEC:
      return getLink_id_vec();

    case LINK_PASS_DIST:
      return getLink_pass_dist();

    case PROJ_X:
      return getProj_x();

    case PROJ_Y:
      return getProj_y();

    case CERTAINTY:
      return getCertainty();

    case BIZTYPE:
      return getBiztype();

    case ROLE:
      return getRole();

    case PHONE:
      return getPhone();

    case MAP_VERSION:
      return getMap_version();

    case BIZSTATUS:
      return getBizstatus();

    case TRACE:
      return getTrace();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TRAJ_ID:
      return isSetTraj_id();
    case SRC_X:
      return isSetSrc_x();
    case SRC_Y:
      return isSetSrc_y();
    case USER_ID:
      return isSetUser_id();
    case TIMESTAMP:
      return isSetTimestamp();
    case POINT_SPEED:
      return isSetPoint_speed();
    case POINT_DIRECTION:
      return isSetPoint_direction();
    case LINE_SPEED:
      return isSetLine_speed();
    case LINE_DIRECTION:
      return isSetLine_direction();
    case LINK_ID_VEC:
      return isSetLink_id_vec();
    case LINK_PASS_DIST:
      return isSetLink_pass_dist();
    case PROJ_X:
      return isSetProj_x();
    case PROJ_Y:
      return isSetProj_y();
    case CERTAINTY:
      return isSetCertainty();
    case BIZTYPE:
      return isSetBiztype();
    case ROLE:
      return isSetRole();
    case PHONE:
      return isSetPhone();
    case MAP_VERSION:
      return isSetMap_version();
    case BIZSTATUS:
      return isSetBizstatus();
    case TRACE:
      return isSetTrace();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof map_match_point_t)
      return this.equals((map_match_point_t)that);
    return false;
  }

  public boolean equals(map_match_point_t that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_traj_id = true && this.isSetTraj_id();
    boolean that_present_traj_id = true && that.isSetTraj_id();
    if (this_present_traj_id || that_present_traj_id) {
      if (!(this_present_traj_id && that_present_traj_id))
        return false;
      if (!this.traj_id.equals(that.traj_id))
        return false;
    }

    boolean this_present_src_x = true;
    boolean that_present_src_x = true;
    if (this_present_src_x || that_present_src_x) {
      if (!(this_present_src_x && that_present_src_x))
        return false;
      if (this.src_x != that.src_x)
        return false;
    }

    boolean this_present_src_y = true;
    boolean that_present_src_y = true;
    if (this_present_src_y || that_present_src_y) {
      if (!(this_present_src_y && that_present_src_y))
        return false;
      if (this.src_y != that.src_y)
        return false;
    }

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (!this.user_id.equals(that.user_id))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_point_speed = true;
    boolean that_present_point_speed = true;
    if (this_present_point_speed || that_present_point_speed) {
      if (!(this_present_point_speed && that_present_point_speed))
        return false;
      if (this.point_speed != that.point_speed)
        return false;
    }

    boolean this_present_point_direction = true;
    boolean that_present_point_direction = true;
    if (this_present_point_direction || that_present_point_direction) {
      if (!(this_present_point_direction && that_present_point_direction))
        return false;
      if (this.point_direction != that.point_direction)
        return false;
    }

    boolean this_present_line_speed = true;
    boolean that_present_line_speed = true;
    if (this_present_line_speed || that_present_line_speed) {
      if (!(this_present_line_speed && that_present_line_speed))
        return false;
      if (this.line_speed != that.line_speed)
        return false;
    }

    boolean this_present_line_direction = true;
    boolean that_present_line_direction = true;
    if (this_present_line_direction || that_present_line_direction) {
      if (!(this_present_line_direction && that_present_line_direction))
        return false;
      if (this.line_direction != that.line_direction)
        return false;
    }

    boolean this_present_link_id_vec = true && this.isSetLink_id_vec();
    boolean that_present_link_id_vec = true && that.isSetLink_id_vec();
    if (this_present_link_id_vec || that_present_link_id_vec) {
      if (!(this_present_link_id_vec && that_present_link_id_vec))
        return false;
      if (!this.link_id_vec.equals(that.link_id_vec))
        return false;
    }

    boolean this_present_link_pass_dist = true;
    boolean that_present_link_pass_dist = true;
    if (this_present_link_pass_dist || that_present_link_pass_dist) {
      if (!(this_present_link_pass_dist && that_present_link_pass_dist))
        return false;
      if (this.link_pass_dist != that.link_pass_dist)
        return false;
    }

    boolean this_present_proj_x = true;
    boolean that_present_proj_x = true;
    if (this_present_proj_x || that_present_proj_x) {
      if (!(this_present_proj_x && that_present_proj_x))
        return false;
      if (this.proj_x != that.proj_x)
        return false;
    }

    boolean this_present_proj_y = true;
    boolean that_present_proj_y = true;
    if (this_present_proj_y || that_present_proj_y) {
      if (!(this_present_proj_y && that_present_proj_y))
        return false;
      if (this.proj_y != that.proj_y)
        return false;
    }

    boolean this_present_certainty = true;
    boolean that_present_certainty = true;
    if (this_present_certainty || that_present_certainty) {
      if (!(this_present_certainty && that_present_certainty))
        return false;
      if (this.certainty != that.certainty)
        return false;
    }

    boolean this_present_biztype = true;
    boolean that_present_biztype = true;
    if (this_present_biztype || that_present_biztype) {
      if (!(this_present_biztype && that_present_biztype))
        return false;
      if (this.biztype != that.biztype)
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_map_version = true && this.isSetMap_version();
    boolean that_present_map_version = true && that.isSetMap_version();
    if (this_present_map_version || that_present_map_version) {
      if (!(this_present_map_version && that_present_map_version))
        return false;
      if (!this.map_version.equals(that.map_version))
        return false;
    }

    boolean this_present_bizstatus = true;
    boolean that_present_bizstatus = true;
    if (this_present_bizstatus || that_present_bizstatus) {
      if (!(this_present_bizstatus && that_present_bizstatus))
        return false;
      if (this.bizstatus != that.bizstatus)
        return false;
    }

    boolean this_present_trace = true && this.isSetTrace();
    boolean that_present_trace = true && that.isSetTrace();
    if (this_present_trace || that_present_trace) {
      if (!(this_present_trace && that_present_trace))
        return false;
      if (!this.trace.equals(that.trace))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTraj_id()) ? 131071 : 524287);
    if (isSetTraj_id())
      hashCode = hashCode * 8191 + traj_id.hashCode();

    hashCode = hashCode * 8191 + src_x;

    hashCode = hashCode * 8191 + src_y;

    hashCode = hashCode * 8191 + ((isSetUser_id()) ? 131071 : 524287);
    if (isSetUser_id())
      hashCode = hashCode * 8191 + user_id.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point_speed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point_direction);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(line_speed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(line_direction);

    hashCode = hashCode * 8191 + ((isSetLink_id_vec()) ? 131071 : 524287);
    if (isSetLink_id_vec())
      hashCode = hashCode * 8191 + link_id_vec.hashCode();

    hashCode = hashCode * 8191 + link_pass_dist;

    hashCode = hashCode * 8191 + proj_x;

    hashCode = hashCode * 8191 + proj_y;

    hashCode = hashCode * 8191 + certainty;

    hashCode = hashCode * 8191 + biztype;

    hashCode = hashCode * 8191 + role;

    hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
    if (isSetPhone())
      hashCode = hashCode * 8191 + phone.hashCode();

    hashCode = hashCode * 8191 + ((isSetMap_version()) ? 131071 : 524287);
    if (isSetMap_version())
      hashCode = hashCode * 8191 + map_version.hashCode();

    hashCode = hashCode * 8191 + bizstatus;

    hashCode = hashCode * 8191 + ((isSetTrace()) ? 131071 : 524287);
    if (isSetTrace())
      hashCode = hashCode * 8191 + trace.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(map_match_point_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTraj_id()).compareTo(other.isSetTraj_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraj_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traj_id, other.traj_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSrc_x()).compareTo(other.isSetSrc_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_x, other.src_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSrc_y()).compareTo(other.isSetSrc_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_y, other.src_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoint_speed()).compareTo(other.isSetPoint_speed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint_speed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point_speed, other.point_speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoint_direction()).compareTo(other.isSetPoint_direction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint_direction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point_direction, other.point_direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLine_speed()).compareTo(other.isSetLine_speed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_speed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_speed, other.line_speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLine_direction()).compareTo(other.isSetLine_direction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_direction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_direction, other.line_direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink_id_vec()).compareTo(other.isSetLink_id_vec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink_id_vec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_id_vec, other.link_id_vec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink_pass_dist()).compareTo(other.isSetLink_pass_dist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink_pass_dist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_pass_dist, other.link_pass_dist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProj_x()).compareTo(other.isSetProj_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProj_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proj_x, other.proj_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProj_y()).compareTo(other.isSetProj_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProj_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proj_y, other.proj_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCertainty()).compareTo(other.isSetCertainty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertainty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certainty, other.certainty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBiztype()).compareTo(other.isSetBiztype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBiztype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.biztype, other.biztype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMap_version()).compareTo(other.isSetMap_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_version, other.map_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBizstatus()).compareTo(other.isSetBizstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizstatus, other.bizstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTrace()).compareTo(other.isSetTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace, other.trace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("map_match_point_t(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traj_id:");
    if (this.traj_id == null) {
      sb.append("null");
    } else {
      sb.append(this.traj_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_x:");
    sb.append(this.src_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_y:");
    sb.append(this.src_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_id:");
    if (this.user_id == null) {
      sb.append("null");
    } else {
      sb.append(this.user_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point_speed:");
    sb.append(this.point_speed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point_direction:");
    sb.append(this.point_direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("line_speed:");
    sb.append(this.line_speed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("line_direction:");
    sb.append(this.line_direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("link_id_vec:");
    if (this.link_id_vec == null) {
      sb.append("null");
    } else {
      sb.append(this.link_id_vec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link_pass_dist:");
    sb.append(this.link_pass_dist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proj_x:");
    sb.append(this.proj_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proj_y:");
    sb.append(this.proj_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certainty:");
    sb.append(this.certainty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("biztype:");
    sb.append(this.biztype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("map_version:");
    if (this.map_version == null) {
      sb.append("null");
    } else {
      sb.append(this.map_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizstatus:");
    sb.append(this.bizstatus);
    first = false;
    if (isSetTrace()) {
      if (!first) sb.append(", ");
      sb.append("trace:");
      if (this.trace == null) {
        sb.append("null");
      } else {
        sb.append(this.trace);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (trace != null) {
      trace.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class map_match_point_tStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public map_match_point_tStandardScheme getScheme() {
      return new map_match_point_tStandardScheme();
    }
  }

  private static class map_match_point_tStandardScheme extends org.apache.thrift.scheme.StandardScheme<map_match_point_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, map_match_point_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRAJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traj_id = iprot.readString();
              struct.setTraj_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_x = iprot.readI32();
              struct.setSrc_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_y = iprot.readI32();
              struct.setSrc_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_id = iprot.readString();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POINT_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point_speed = iprot.readDouble();
              struct.setPoint_speedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POINT_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point_direction = iprot.readDouble();
              struct.setPoint_directionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LINE_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.line_speed = iprot.readDouble();
              struct.setLine_speedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LINE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.line_direction = iprot.readDouble();
              struct.setLine_directionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LINK_ID_VEC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.link_id_vec = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.link_id_vec.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLink_id_vecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LINK_PASS_DIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.link_pass_dist = iprot.readI32();
              struct.setLink_pass_distIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROJ_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.proj_x = iprot.readI32();
              struct.setProj_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJ_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.proj_y = iprot.readI32();
              struct.setProj_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CERTAINTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certainty = iprot.readI32();
              struct.setCertaintyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BIZTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.biztype = iprot.readI16();
              struct.setBiztypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.role = iprot.readI16();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.map_version = iprot.readString();
              struct.setMap_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BIZSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizstatus = iprot.readI32();
              struct.setBizstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.trace = new com.lsy.knowledge.traffic.base.domain.thrift.Trace();
              struct.trace.read(iprot);
              struct.setTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, map_match_point_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.traj_id != null) {
        oprot.writeFieldBegin(TRAJ_ID_FIELD_DESC);
        oprot.writeString(struct.traj_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SRC_X_FIELD_DESC);
      oprot.writeI32(struct.src_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SRC_Y_FIELD_DESC);
      oprot.writeI32(struct.src_y);
      oprot.writeFieldEnd();
      if (struct.user_id != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.user_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.point_speed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_DIRECTION_FIELD_DESC);
      oprot.writeDouble(struct.point_direction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINE_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.line_speed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINE_DIRECTION_FIELD_DESC);
      oprot.writeDouble(struct.line_direction);
      oprot.writeFieldEnd();
      if (struct.link_id_vec != null) {
        oprot.writeFieldBegin(LINK_ID_VEC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.link_id_vec.size()));
          for (long _iter3 : struct.link_id_vec)
          {
            oprot.writeI64(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LINK_PASS_DIST_FIELD_DESC);
      oprot.writeI32(struct.link_pass_dist);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJ_X_FIELD_DESC);
      oprot.writeI32(struct.proj_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJ_Y_FIELD_DESC);
      oprot.writeI32(struct.proj_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CERTAINTY_FIELD_DESC);
      oprot.writeI32(struct.certainty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIZTYPE_FIELD_DESC);
      oprot.writeI16(struct.biztype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI16(struct.role);
      oprot.writeFieldEnd();
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.map_version != null) {
        oprot.writeFieldBegin(MAP_VERSION_FIELD_DESC);
        oprot.writeString(struct.map_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIZSTATUS_FIELD_DESC);
      oprot.writeI32(struct.bizstatus);
      oprot.writeFieldEnd();
      if (struct.trace != null) {
        if (struct.isSetTrace()) {
          oprot.writeFieldBegin(TRACE_FIELD_DESC);
          struct.trace.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class map_match_point_tTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public map_match_point_tTupleScheme getScheme() {
      return new map_match_point_tTupleScheme();
    }
  }

  private static class map_match_point_tTupleScheme extends org.apache.thrift.scheme.TupleScheme<map_match_point_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, map_match_point_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTraj_id()) {
        optionals.set(1);
      }
      if (struct.isSetSrc_x()) {
        optionals.set(2);
      }
      if (struct.isSetSrc_y()) {
        optionals.set(3);
      }
      if (struct.isSetUser_id()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetPoint_speed()) {
        optionals.set(6);
      }
      if (struct.isSetPoint_direction()) {
        optionals.set(7);
      }
      if (struct.isSetLine_speed()) {
        optionals.set(8);
      }
      if (struct.isSetLine_direction()) {
        optionals.set(9);
      }
      if (struct.isSetLink_id_vec()) {
        optionals.set(10);
      }
      if (struct.isSetLink_pass_dist()) {
        optionals.set(11);
      }
      if (struct.isSetProj_x()) {
        optionals.set(12);
      }
      if (struct.isSetProj_y()) {
        optionals.set(13);
      }
      if (struct.isSetCertainty()) {
        optionals.set(14);
      }
      if (struct.isSetBiztype()) {
        optionals.set(15);
      }
      if (struct.isSetRole()) {
        optionals.set(16);
      }
      if (struct.isSetPhone()) {
        optionals.set(17);
      }
      if (struct.isSetMap_version()) {
        optionals.set(18);
      }
      if (struct.isSetBizstatus()) {
        optionals.set(19);
      }
      if (struct.isSetTrace()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTraj_id()) {
        oprot.writeString(struct.traj_id);
      }
      if (struct.isSetSrc_x()) {
        oprot.writeI32(struct.src_x);
      }
      if (struct.isSetSrc_y()) {
        oprot.writeI32(struct.src_y);
      }
      if (struct.isSetUser_id()) {
        oprot.writeString(struct.user_id);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetPoint_speed()) {
        oprot.writeDouble(struct.point_speed);
      }
      if (struct.isSetPoint_direction()) {
        oprot.writeDouble(struct.point_direction);
      }
      if (struct.isSetLine_speed()) {
        oprot.writeDouble(struct.line_speed);
      }
      if (struct.isSetLine_direction()) {
        oprot.writeDouble(struct.line_direction);
      }
      if (struct.isSetLink_id_vec()) {
        {
          oprot.writeI32(struct.link_id_vec.size());
          for (long _iter4 : struct.link_id_vec)
          {
            oprot.writeI64(_iter4);
          }
        }
      }
      if (struct.isSetLink_pass_dist()) {
        oprot.writeI32(struct.link_pass_dist);
      }
      if (struct.isSetProj_x()) {
        oprot.writeI32(struct.proj_x);
      }
      if (struct.isSetProj_y()) {
        oprot.writeI32(struct.proj_y);
      }
      if (struct.isSetCertainty()) {
        oprot.writeI32(struct.certainty);
      }
      if (struct.isSetBiztype()) {
        oprot.writeI16(struct.biztype);
      }
      if (struct.isSetRole()) {
        oprot.writeI16(struct.role);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetMap_version()) {
        oprot.writeString(struct.map_version);
      }
      if (struct.isSetBizstatus()) {
        oprot.writeI32(struct.bizstatus);
      }
      if (struct.isSetTrace()) {
        struct.trace.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, map_match_point_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.traj_id = iprot.readString();
        struct.setTraj_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.src_x = iprot.readI32();
        struct.setSrc_xIsSet(true);
      }
      if (incoming.get(3)) {
        struct.src_y = iprot.readI32();
        struct.setSrc_yIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user_id = iprot.readString();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.point_speed = iprot.readDouble();
        struct.setPoint_speedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.point_direction = iprot.readDouble();
        struct.setPoint_directionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.line_speed = iprot.readDouble();
        struct.setLine_speedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.line_direction = iprot.readDouble();
        struct.setLine_directionIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.link_id_vec = new java.util.ArrayList<java.lang.Long>(_list5.size);
          long _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI64();
            struct.link_id_vec.add(_elem6);
          }
        }
        struct.setLink_id_vecIsSet(true);
      }
      if (incoming.get(11)) {
        struct.link_pass_dist = iprot.readI32();
        struct.setLink_pass_distIsSet(true);
      }
      if (incoming.get(12)) {
        struct.proj_x = iprot.readI32();
        struct.setProj_xIsSet(true);
      }
      if (incoming.get(13)) {
        struct.proj_y = iprot.readI32();
        struct.setProj_yIsSet(true);
      }
      if (incoming.get(14)) {
        struct.certainty = iprot.readI32();
        struct.setCertaintyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.biztype = iprot.readI16();
        struct.setBiztypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.role = iprot.readI16();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(17)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(18)) {
        struct.map_version = iprot.readString();
        struct.setMap_versionIsSet(true);
      }
      if (incoming.get(19)) {
        struct.bizstatus = iprot.readI32();
        struct.setBizstatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.trace = new com.lsy.knowledge.traffic.base.domain.thrift.Trace();
        struct.trace.read(iprot);
        struct.setTraceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

