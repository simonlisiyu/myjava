/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsy.knowledge.traffic.base.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-27")
public class PointTraj2MapMatchPointRequest implements org.apache.thrift.TBase<PointTraj2MapMatchPointRequest, PointTraj2MapMatchPointRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PointTraj2MapMatchPointRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PointTraj2MapMatchPointRequest");

  private static final org.apache.thrift.protocol.TField POINT_TRAJ_VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("point_traj_vec", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CANDIDATE_LINK_DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate_link_dist", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PointTraj2MapMatchPointRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PointTraj2MapMatchPointRequestTupleSchemeFactory();

  public java.util.List<point_traj_t> point_traj_vec; // required
  public int candidate_link_dist; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POINT_TRAJ_VEC((short)1, "point_traj_vec"),
    CANDIDATE_LINK_DIST((short)2, "candidate_link_dist");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POINT_TRAJ_VEC
          return POINT_TRAJ_VEC;
        case 2: // CANDIDATE_LINK_DIST
          return CANDIDATE_LINK_DIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANDIDATE_LINK_DIST_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CANDIDATE_LINK_DIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POINT_TRAJ_VEC, new org.apache.thrift.meta_data.FieldMetaData("point_traj_vec", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, point_traj_t.class))));
    tmpMap.put(_Fields.CANDIDATE_LINK_DIST, new org.apache.thrift.meta_data.FieldMetaData("candidate_link_dist", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PointTraj2MapMatchPointRequest.class, metaDataMap);
  }

  public PointTraj2MapMatchPointRequest() {
    this.candidate_link_dist = 0;

  }

  public PointTraj2MapMatchPointRequest(
    java.util.List<point_traj_t> point_traj_vec)
  {
    this();
    this.point_traj_vec = point_traj_vec;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PointTraj2MapMatchPointRequest(PointTraj2MapMatchPointRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPoint_traj_vec()) {
      java.util.List<point_traj_t> __this__point_traj_vec = new java.util.ArrayList<point_traj_t>(other.point_traj_vec.size());
      for (point_traj_t other_element : other.point_traj_vec) {
        __this__point_traj_vec.add(new point_traj_t(other_element));
      }
      this.point_traj_vec = __this__point_traj_vec;
    }
    this.candidate_link_dist = other.candidate_link_dist;
  }

  public PointTraj2MapMatchPointRequest deepCopy() {
    return new PointTraj2MapMatchPointRequest(this);
  }

  @Override
  public void clear() {
    this.point_traj_vec = null;
    this.candidate_link_dist = 0;

  }

  public int getPoint_traj_vecSize() {
    return (this.point_traj_vec == null) ? 0 : this.point_traj_vec.size();
  }

  public java.util.Iterator<point_traj_t> getPoint_traj_vecIterator() {
    return (this.point_traj_vec == null) ? null : this.point_traj_vec.iterator();
  }

  public void addToPoint_traj_vec(point_traj_t elem) {
    if (this.point_traj_vec == null) {
      this.point_traj_vec = new java.util.ArrayList<point_traj_t>();
    }
    this.point_traj_vec.add(elem);
  }

  public java.util.List<point_traj_t> getPoint_traj_vec() {
    return this.point_traj_vec;
  }

  public PointTraj2MapMatchPointRequest setPoint_traj_vec(java.util.List<point_traj_t> point_traj_vec) {
    this.point_traj_vec = point_traj_vec;
    return this;
  }

  public void unsetPoint_traj_vec() {
    this.point_traj_vec = null;
  }

  /** Returns true if field point_traj_vec is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint_traj_vec() {
    return this.point_traj_vec != null;
  }

  public void setPoint_traj_vecIsSet(boolean value) {
    if (!value) {
      this.point_traj_vec = null;
    }
  }

  public int getCandidate_link_dist() {
    return this.candidate_link_dist;
  }

  public PointTraj2MapMatchPointRequest setCandidate_link_dist(int candidate_link_dist) {
    this.candidate_link_dist = candidate_link_dist;
    setCandidate_link_distIsSet(true);
    return this;
  }

  public void unsetCandidate_link_dist() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATE_LINK_DIST_ISSET_ID);
  }

  /** Returns true if field candidate_link_dist is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidate_link_dist() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATE_LINK_DIST_ISSET_ID);
  }

  public void setCandidate_link_distIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATE_LINK_DIST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case POINT_TRAJ_VEC:
      if (value == null) {
        unsetPoint_traj_vec();
      } else {
        setPoint_traj_vec((java.util.List<point_traj_t>)value);
      }
      break;

    case CANDIDATE_LINK_DIST:
      if (value == null) {
        unsetCandidate_link_dist();
      } else {
        setCandidate_link_dist((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case POINT_TRAJ_VEC:
      return getPoint_traj_vec();

    case CANDIDATE_LINK_DIST:
      return getCandidate_link_dist();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case POINT_TRAJ_VEC:
      return isSetPoint_traj_vec();
    case CANDIDATE_LINK_DIST:
      return isSetCandidate_link_dist();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PointTraj2MapMatchPointRequest)
      return this.equals((PointTraj2MapMatchPointRequest)that);
    return false;
  }

  public boolean equals(PointTraj2MapMatchPointRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_point_traj_vec = true && this.isSetPoint_traj_vec();
    boolean that_present_point_traj_vec = true && that.isSetPoint_traj_vec();
    if (this_present_point_traj_vec || that_present_point_traj_vec) {
      if (!(this_present_point_traj_vec && that_present_point_traj_vec))
        return false;
      if (!this.point_traj_vec.equals(that.point_traj_vec))
        return false;
    }

    boolean this_present_candidate_link_dist = true && this.isSetCandidate_link_dist();
    boolean that_present_candidate_link_dist = true && that.isSetCandidate_link_dist();
    if (this_present_candidate_link_dist || that_present_candidate_link_dist) {
      if (!(this_present_candidate_link_dist && that_present_candidate_link_dist))
        return false;
      if (this.candidate_link_dist != that.candidate_link_dist)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPoint_traj_vec()) ? 131071 : 524287);
    if (isSetPoint_traj_vec())
      hashCode = hashCode * 8191 + point_traj_vec.hashCode();

    hashCode = hashCode * 8191 + ((isSetCandidate_link_dist()) ? 131071 : 524287);
    if (isSetCandidate_link_dist())
      hashCode = hashCode * 8191 + candidate_link_dist;

    return hashCode;
  }

  @Override
  public int compareTo(PointTraj2MapMatchPointRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPoint_traj_vec()).compareTo(other.isSetPoint_traj_vec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint_traj_vec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point_traj_vec, other.point_traj_vec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCandidate_link_dist()).compareTo(other.isSetCandidate_link_dist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidate_link_dist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate_link_dist, other.candidate_link_dist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PointTraj2MapMatchPointRequest(");
    boolean first = true;

    sb.append("point_traj_vec:");
    if (this.point_traj_vec == null) {
      sb.append("null");
    } else {
      sb.append(this.point_traj_vec);
    }
    first = false;
    if (isSetCandidate_link_dist()) {
      if (!first) sb.append(", ");
      sb.append("candidate_link_dist:");
      sb.append(this.candidate_link_dist);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointTraj2MapMatchPointRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PointTraj2MapMatchPointRequestStandardScheme getScheme() {
      return new PointTraj2MapMatchPointRequestStandardScheme();
    }
  }

  private static class PointTraj2MapMatchPointRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<PointTraj2MapMatchPointRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PointTraj2MapMatchPointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POINT_TRAJ_VEC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.point_traj_vec = new java.util.ArrayList<point_traj_t>(_list16.size);
                point_traj_t _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new point_traj_t();
                  _elem17.read(iprot);
                  struct.point_traj_vec.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setPoint_traj_vecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CANDIDATE_LINK_DIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.candidate_link_dist = iprot.readI32();
              struct.setCandidate_link_distIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PointTraj2MapMatchPointRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.point_traj_vec != null) {
        oprot.writeFieldBegin(POINT_TRAJ_VEC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.point_traj_vec.size()));
          for (point_traj_t _iter19 : struct.point_traj_vec)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetCandidate_link_dist()) {
        oprot.writeFieldBegin(CANDIDATE_LINK_DIST_FIELD_DESC);
        oprot.writeI32(struct.candidate_link_dist);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointTraj2MapMatchPointRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PointTraj2MapMatchPointRequestTupleScheme getScheme() {
      return new PointTraj2MapMatchPointRequestTupleScheme();
    }
  }

  private static class PointTraj2MapMatchPointRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<PointTraj2MapMatchPointRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PointTraj2MapMatchPointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPoint_traj_vec()) {
        optionals.set(0);
      }
      if (struct.isSetCandidate_link_dist()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPoint_traj_vec()) {
        {
          oprot.writeI32(struct.point_traj_vec.size());
          for (point_traj_t _iter20 : struct.point_traj_vec)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetCandidate_link_dist()) {
        oprot.writeI32(struct.candidate_link_dist);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PointTraj2MapMatchPointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.point_traj_vec = new java.util.ArrayList<point_traj_t>(_list21.size);
          point_traj_t _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new point_traj_t();
            _elem22.read(iprot);
            struct.point_traj_vec.add(_elem22);
          }
        }
        struct.setPoint_traj_vecIsSet(true);
      }
      if (incoming.get(1)) {
        struct.candidate_link_dist = iprot.readI32();
        struct.setCandidate_link_distIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

