/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsy.knowledge.traffic.base.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-27")
public class MapMatchRes2SpdCalcRequest implements org.apache.thrift.TBase<MapMatchRes2SpdCalcRequest, MapMatchRes2SpdCalcRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MapMatchRes2SpdCalcRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapMatchRes2SpdCalcRequest");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MAP_MATCH_POINT_VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("map_match_point_vec", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_from", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MapMatchRes2SpdCalcRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MapMatchRes2SpdCalcRequestTupleSchemeFactory();

  public long timestamp; // required
  public java.util.List<map_match_point_t> map_match_point_vec; // required
  public int data_source_from; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    MAP_MATCH_POINT_VEC((short)2, "map_match_point_vec"),
    DATA_SOURCE_FROM((short)3, "data_source_from");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // MAP_MATCH_POINT_VEC
          return MAP_MATCH_POINT_VEC;
        case 3: // DATA_SOURCE_FROM
          return DATA_SOURCE_FROM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __DATA_SOURCE_FROM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATA_SOURCE_FROM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "time_t")));
    tmpMap.put(_Fields.MAP_MATCH_POINT_VEC, new org.apache.thrift.meta_data.FieldMetaData("map_match_point_vec", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, map_match_point_t.class))));
    tmpMap.put(_Fields.DATA_SOURCE_FROM, new org.apache.thrift.meta_data.FieldMetaData("data_source_from", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapMatchRes2SpdCalcRequest.class, metaDataMap);
  }

  public MapMatchRes2SpdCalcRequest() {
    this.data_source_from = 0;

  }

  public MapMatchRes2SpdCalcRequest(
    long timestamp,
    java.util.List<map_match_point_t> map_match_point_vec)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.map_match_point_vec = map_match_point_vec;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapMatchRes2SpdCalcRequest(MapMatchRes2SpdCalcRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetMap_match_point_vec()) {
      java.util.List<map_match_point_t> __this__map_match_point_vec = new java.util.ArrayList<map_match_point_t>(other.map_match_point_vec.size());
      for (map_match_point_t other_element : other.map_match_point_vec) {
        __this__map_match_point_vec.add(new map_match_point_t(other_element));
      }
      this.map_match_point_vec = __this__map_match_point_vec;
    }
    this.data_source_from = other.data_source_from;
  }

  public MapMatchRes2SpdCalcRequest deepCopy() {
    return new MapMatchRes2SpdCalcRequest(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.map_match_point_vec = null;
    this.data_source_from = 0;

  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public MapMatchRes2SpdCalcRequest setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getMap_match_point_vecSize() {
    return (this.map_match_point_vec == null) ? 0 : this.map_match_point_vec.size();
  }

  public java.util.Iterator<map_match_point_t> getMap_match_point_vecIterator() {
    return (this.map_match_point_vec == null) ? null : this.map_match_point_vec.iterator();
  }

  public void addToMap_match_point_vec(map_match_point_t elem) {
    if (this.map_match_point_vec == null) {
      this.map_match_point_vec = new java.util.ArrayList<map_match_point_t>();
    }
    this.map_match_point_vec.add(elem);
  }

  public java.util.List<map_match_point_t> getMap_match_point_vec() {
    return this.map_match_point_vec;
  }

  public MapMatchRes2SpdCalcRequest setMap_match_point_vec(java.util.List<map_match_point_t> map_match_point_vec) {
    this.map_match_point_vec = map_match_point_vec;
    return this;
  }

  public void unsetMap_match_point_vec() {
    this.map_match_point_vec = null;
  }

  /** Returns true if field map_match_point_vec is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_match_point_vec() {
    return this.map_match_point_vec != null;
  }

  public void setMap_match_point_vecIsSet(boolean value) {
    if (!value) {
      this.map_match_point_vec = null;
    }
  }

  public int getData_source_from() {
    return this.data_source_from;
  }

  public MapMatchRes2SpdCalcRequest setData_source_from(int data_source_from) {
    this.data_source_from = data_source_from;
    setData_source_fromIsSet(true);
    return this;
  }

  public void unsetData_source_from() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_SOURCE_FROM_ISSET_ID);
  }

  /** Returns true if field data_source_from is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_from() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_SOURCE_FROM_ISSET_ID);
  }

  public void setData_source_fromIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_SOURCE_FROM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case MAP_MATCH_POINT_VEC:
      if (value == null) {
        unsetMap_match_point_vec();
      } else {
        setMap_match_point_vec((java.util.List<map_match_point_t>)value);
      }
      break;

    case DATA_SOURCE_FROM:
      if (value == null) {
        unsetData_source_from();
      } else {
        setData_source_from((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case MAP_MATCH_POINT_VEC:
      return getMap_match_point_vec();

    case DATA_SOURCE_FROM:
      return getData_source_from();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case MAP_MATCH_POINT_VEC:
      return isSetMap_match_point_vec();
    case DATA_SOURCE_FROM:
      return isSetData_source_from();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MapMatchRes2SpdCalcRequest)
      return this.equals((MapMatchRes2SpdCalcRequest)that);
    return false;
  }

  public boolean equals(MapMatchRes2SpdCalcRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_map_match_point_vec = true && this.isSetMap_match_point_vec();
    boolean that_present_map_match_point_vec = true && that.isSetMap_match_point_vec();
    if (this_present_map_match_point_vec || that_present_map_match_point_vec) {
      if (!(this_present_map_match_point_vec && that_present_map_match_point_vec))
        return false;
      if (!this.map_match_point_vec.equals(that.map_match_point_vec))
        return false;
    }

    boolean this_present_data_source_from = true && this.isSetData_source_from();
    boolean that_present_data_source_from = true && that.isSetData_source_from();
    if (this_present_data_source_from || that_present_data_source_from) {
      if (!(this_present_data_source_from && that_present_data_source_from))
        return false;
      if (this.data_source_from != that.data_source_from)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetMap_match_point_vec()) ? 131071 : 524287);
    if (isSetMap_match_point_vec())
      hashCode = hashCode * 8191 + map_match_point_vec.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_source_from()) ? 131071 : 524287);
    if (isSetData_source_from())
      hashCode = hashCode * 8191 + data_source_from;

    return hashCode;
  }

  @Override
  public int compareTo(MapMatchRes2SpdCalcRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMap_match_point_vec()).compareTo(other.isSetMap_match_point_vec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_match_point_vec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_match_point_vec, other.map_match_point_vec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData_source_from()).compareTo(other.isSetData_source_from());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_from()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_from, other.data_source_from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MapMatchRes2SpdCalcRequest(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("map_match_point_vec:");
    if (this.map_match_point_vec == null) {
      sb.append("null");
    } else {
      sb.append(this.map_match_point_vec);
    }
    first = false;
    if (isSetData_source_from()) {
      if (!first) sb.append(", ");
      sb.append("data_source_from:");
      sb.append(this.data_source_from);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MapMatchRes2SpdCalcRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MapMatchRes2SpdCalcRequestStandardScheme getScheme() {
      return new MapMatchRes2SpdCalcRequestStandardScheme();
    }
  }

  private static class MapMatchRes2SpdCalcRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<MapMatchRes2SpdCalcRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MapMatchRes2SpdCalcRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAP_MATCH_POINT_VEC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.map_match_point_vec = new java.util.ArrayList<map_match_point_t>(_list32.size);
                map_match_point_t _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new map_match_point_t();
                  _elem33.read(iprot);
                  struct.map_match_point_vec.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setMap_match_point_vecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_SOURCE_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_source_from = iprot.readI32();
              struct.setData_source_fromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MapMatchRes2SpdCalcRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.map_match_point_vec != null) {
        oprot.writeFieldBegin(MAP_MATCH_POINT_VEC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.map_match_point_vec.size()));
          for (map_match_point_t _iter35 : struct.map_match_point_vec)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetData_source_from()) {
        oprot.writeFieldBegin(DATA_SOURCE_FROM_FIELD_DESC);
        oprot.writeI32(struct.data_source_from);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MapMatchRes2SpdCalcRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MapMatchRes2SpdCalcRequestTupleScheme getScheme() {
      return new MapMatchRes2SpdCalcRequestTupleScheme();
    }
  }

  private static class MapMatchRes2SpdCalcRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<MapMatchRes2SpdCalcRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MapMatchRes2SpdCalcRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetMap_match_point_vec()) {
        optionals.set(1);
      }
      if (struct.isSetData_source_from()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetMap_match_point_vec()) {
        {
          oprot.writeI32(struct.map_match_point_vec.size());
          for (map_match_point_t _iter36 : struct.map_match_point_vec)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetData_source_from()) {
        oprot.writeI32(struct.data_source_from);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MapMatchRes2SpdCalcRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.map_match_point_vec = new java.util.ArrayList<map_match_point_t>(_list37.size);
          map_match_point_t _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new map_match_point_t();
            _elem38.read(iprot);
            struct.map_match_point_vec.add(_elem38);
          }
        }
        struct.setMap_match_point_vecIsSet(true);
      }
      if (incoming.get(2)) {
        struct.data_source_from = iprot.readI32();
        struct.setData_source_fromIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

